
STM32F103C8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000151c  080001d0  080001d0  000101d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080016ec  080016ec  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  080016ec  080016ec  000116ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080016f0  080016f0  000116f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000078  20000000  080016f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  20000078  0800176c  00020078  2**2
                  ALLOC
  7 ._user_heap_stack 00000080  20000098  0800176c  00020098  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
  9 .debug_info   00005cc7  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000e58  00000000  00000000  00025d68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000008f0  00000000  00000000  00026bc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000858  00000000  00000000  000274b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00002bb5  00000000  00000000  00027d08  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002391  00000000  00000000  0002a8bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0002cc4e  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00002810  00000000  00000000  0002cccc  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stab         00000024  00000000  00000000  0002f4dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  0002f500  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080016d4 	.word	0x080016d4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	080016d4 	.word	0x080016d4

08000210 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000210:	b480      	push	{r7}
 8000212:	b089      	sub	sp, #36	; 0x24
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
 8000218:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 800021a:	2300      	movs	r3, #0
 800021c:	61fb      	str	r3, [r7, #28]
 800021e:	2300      	movs	r3, #0
 8000220:	613b      	str	r3, [r7, #16]
 8000222:	2300      	movs	r3, #0
 8000224:	61bb      	str	r3, [r7, #24]
 8000226:	2300      	movs	r3, #0
 8000228:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 800022a:	2300      	movs	r3, #0
 800022c:	617b      	str	r3, [r7, #20]
 800022e:	2300      	movs	r3, #0
 8000230:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8000232:	683b      	ldr	r3, [r7, #0]
 8000234:	78db      	ldrb	r3, [r3, #3]
 8000236:	f003 030f 	and.w	r3, r3, #15
 800023a:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 800023c:	683b      	ldr	r3, [r7, #0]
 800023e:	78db      	ldrb	r3, [r3, #3]
 8000240:	f003 0310 	and.w	r3, r3, #16
 8000244:	2b00      	cmp	r3, #0
 8000246:	d005      	beq.n	8000254 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8000248:	683b      	ldr	r3, [r7, #0]
 800024a:	789b      	ldrb	r3, [r3, #2]
 800024c:	461a      	mov	r2, r3
 800024e:	69fb      	ldr	r3, [r7, #28]
 8000250:	4313      	orrs	r3, r2
 8000252:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8000254:	683b      	ldr	r3, [r7, #0]
 8000256:	881b      	ldrh	r3, [r3, #0]
 8000258:	b2db      	uxtb	r3, r3
 800025a:	2b00      	cmp	r3, #0
 800025c:	d044      	beq.n	80002e8 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000264:	2300      	movs	r3, #0
 8000266:	61bb      	str	r3, [r7, #24]
 8000268:	e038      	b.n	80002dc <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 800026a:	2201      	movs	r2, #1
 800026c:	69bb      	ldr	r3, [r7, #24]
 800026e:	fa02 f303 	lsl.w	r3, r2, r3
 8000272:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000274:	683b      	ldr	r3, [r7, #0]
 8000276:	881b      	ldrh	r3, [r3, #0]
 8000278:	461a      	mov	r2, r3
 800027a:	68fb      	ldr	r3, [r7, #12]
 800027c:	4013      	ands	r3, r2
 800027e:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000280:	693a      	ldr	r2, [r7, #16]
 8000282:	68fb      	ldr	r3, [r7, #12]
 8000284:	429a      	cmp	r2, r3
 8000286:	d126      	bne.n	80002d6 <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 8000288:	69bb      	ldr	r3, [r7, #24]
 800028a:	009b      	lsls	r3, r3, #2
 800028c:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 800028e:	220f      	movs	r2, #15
 8000290:	68fb      	ldr	r3, [r7, #12]
 8000292:	fa02 f303 	lsl.w	r3, r2, r3
 8000296:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000298:	68bb      	ldr	r3, [r7, #8]
 800029a:	43db      	mvns	r3, r3
 800029c:	697a      	ldr	r2, [r7, #20]
 800029e:	4013      	ands	r3, r2
 80002a0:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80002a2:	69fa      	ldr	r2, [r7, #28]
 80002a4:	68fb      	ldr	r3, [r7, #12]
 80002a6:	fa02 f303 	lsl.w	r3, r2, r3
 80002aa:	697a      	ldr	r2, [r7, #20]
 80002ac:	4313      	orrs	r3, r2
 80002ae:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80002b0:	683b      	ldr	r3, [r7, #0]
 80002b2:	78db      	ldrb	r3, [r3, #3]
 80002b4:	2b28      	cmp	r3, #40	; 0x28
 80002b6:	d105      	bne.n	80002c4 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80002b8:	2201      	movs	r2, #1
 80002ba:	69bb      	ldr	r3, [r7, #24]
 80002bc:	409a      	lsls	r2, r3
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	615a      	str	r2, [r3, #20]
 80002c2:	e008      	b.n	80002d6 <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80002c4:	683b      	ldr	r3, [r7, #0]
 80002c6:	78db      	ldrb	r3, [r3, #3]
 80002c8:	2b48      	cmp	r3, #72	; 0x48
 80002ca:	d104      	bne.n	80002d6 <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80002cc:	2201      	movs	r2, #1
 80002ce:	69bb      	ldr	r3, [r7, #24]
 80002d0:	409a      	lsls	r2, r3
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80002d6:	69bb      	ldr	r3, [r7, #24]
 80002d8:	3301      	adds	r3, #1
 80002da:	61bb      	str	r3, [r7, #24]
 80002dc:	69bb      	ldr	r3, [r7, #24]
 80002de:	2b07      	cmp	r3, #7
 80002e0:	d9c3      	bls.n	800026a <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	697a      	ldr	r2, [r7, #20]
 80002e6:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 80002e8:	683b      	ldr	r3, [r7, #0]
 80002ea:	881b      	ldrh	r3, [r3, #0]
 80002ec:	2bff      	cmp	r3, #255	; 0xff
 80002ee:	d946      	bls.n	800037e <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	685b      	ldr	r3, [r3, #4]
 80002f4:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80002f6:	2300      	movs	r3, #0
 80002f8:	61bb      	str	r3, [r7, #24]
 80002fa:	e03a      	b.n	8000372 <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 80002fc:	69bb      	ldr	r3, [r7, #24]
 80002fe:	3308      	adds	r3, #8
 8000300:	2201      	movs	r2, #1
 8000302:	fa02 f303 	lsl.w	r3, r2, r3
 8000306:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8000308:	683b      	ldr	r3, [r7, #0]
 800030a:	881b      	ldrh	r3, [r3, #0]
 800030c:	461a      	mov	r2, r3
 800030e:	68fb      	ldr	r3, [r7, #12]
 8000310:	4013      	ands	r3, r2
 8000312:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000314:	693a      	ldr	r2, [r7, #16]
 8000316:	68fb      	ldr	r3, [r7, #12]
 8000318:	429a      	cmp	r2, r3
 800031a:	d127      	bne.n	800036c <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 800031c:	69bb      	ldr	r3, [r7, #24]
 800031e:	009b      	lsls	r3, r3, #2
 8000320:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000322:	220f      	movs	r2, #15
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	fa02 f303 	lsl.w	r3, r2, r3
 800032a:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 800032c:	68bb      	ldr	r3, [r7, #8]
 800032e:	43db      	mvns	r3, r3
 8000330:	697a      	ldr	r2, [r7, #20]
 8000332:	4013      	ands	r3, r2
 8000334:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000336:	69fa      	ldr	r2, [r7, #28]
 8000338:	68fb      	ldr	r3, [r7, #12]
 800033a:	fa02 f303 	lsl.w	r3, r2, r3
 800033e:	697a      	ldr	r2, [r7, #20]
 8000340:	4313      	orrs	r3, r2
 8000342:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000344:	683b      	ldr	r3, [r7, #0]
 8000346:	78db      	ldrb	r3, [r3, #3]
 8000348:	2b28      	cmp	r3, #40	; 0x28
 800034a:	d105      	bne.n	8000358 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800034c:	69bb      	ldr	r3, [r7, #24]
 800034e:	3308      	adds	r3, #8
 8000350:	2201      	movs	r2, #1
 8000352:	409a      	lsls	r2, r3
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000358:	683b      	ldr	r3, [r7, #0]
 800035a:	78db      	ldrb	r3, [r3, #3]
 800035c:	2b48      	cmp	r3, #72	; 0x48
 800035e:	d105      	bne.n	800036c <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000360:	69bb      	ldr	r3, [r7, #24]
 8000362:	3308      	adds	r3, #8
 8000364:	2201      	movs	r2, #1
 8000366:	409a      	lsls	r2, r3
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800036c:	69bb      	ldr	r3, [r7, #24]
 800036e:	3301      	adds	r3, #1
 8000370:	61bb      	str	r3, [r7, #24]
 8000372:	69bb      	ldr	r3, [r7, #24]
 8000374:	2b07      	cmp	r3, #7
 8000376:	d9c1      	bls.n	80002fc <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	697a      	ldr	r2, [r7, #20]
 800037c:	605a      	str	r2, [r3, #4]
  }
}
 800037e:	bf00      	nop
 8000380:	3724      	adds	r7, #36	; 0x24
 8000382:	46bd      	mov	sp, r7
 8000384:	bc80      	pop	{r7}
 8000386:	4770      	bx	lr

08000388 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that
  *   contains the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b08a      	sub	sp, #40	; 0x28
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
 8000390:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 8000392:	2300      	movs	r3, #0
 8000394:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000396:	2300      	movs	r3, #0
 8000398:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 800039a:	2304      	movs	r3, #4
 800039c:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 800039e:	4b57      	ldr	r3, [pc, #348]	; (80004fc <I2C_Init+0x174>)
 80003a0:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	889b      	ldrh	r3, [r3, #4]
 80003a6:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= CR2_FREQ_Reset;
 80003a8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80003aa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80003ae:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 80003b0:	f107 0308 	add.w	r3, r7, #8
 80003b4:	4618      	mov	r0, r3
 80003b6:	f000 f9bf 	bl	8000738 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 80003ba:	693b      	ldr	r3, [r7, #16]
 80003bc:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 80003be:	69fb      	ldr	r3, [r7, #28]
 80003c0:	4a4f      	ldr	r2, [pc, #316]	; (8000500 <I2C_Init+0x178>)
 80003c2:	fba2 2303 	umull	r2, r3, r2, r3
 80003c6:	0c9b      	lsrs	r3, r3, #18
 80003c8:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 80003ca:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80003cc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80003ce:	4313      	orrs	r3, r2
 80003d0:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80003d6:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= CR1_PE_Reset;
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	881b      	ldrh	r3, [r3, #0]
 80003dc:	b29b      	uxth	r3, r3
 80003de:	f023 0301 	bic.w	r3, r3, #1
 80003e2:	b29a      	uxth	r2, r3
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 80003e8:	2300      	movs	r3, #0
 80003ea:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 80003ec:	683b      	ldr	r3, [r7, #0]
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	4a44      	ldr	r2, [pc, #272]	; (8000504 <I2C_Init+0x17c>)
 80003f2:	4293      	cmp	r3, r2
 80003f4:	d815      	bhi.n	8000422 <I2C_Init+0x9a>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 80003f6:	683b      	ldr	r3, [r7, #0]
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	005b      	lsls	r3, r3, #1
 80003fc:	69fa      	ldr	r2, [r7, #28]
 80003fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000402:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 8000404:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000406:	2b03      	cmp	r3, #3
 8000408:	d801      	bhi.n	800040e <I2C_Init+0x86>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 800040a:	2304      	movs	r3, #4
 800040c:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 800040e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000410:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000412:	4313      	orrs	r3, r2
 8000414:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 8000416:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000418:	3301      	adds	r3, #1
 800041a:	b29a      	uxth	r2, r3
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	841a      	strh	r2, [r3, #32]
 8000420:	e040      	b.n	80004a4 <I2C_Init+0x11c>
  }
  /* Configure speed in fast mode */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 8000422:	683b      	ldr	r3, [r7, #0]
 8000424:	88db      	ldrh	r3, [r3, #6]
 8000426:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 800042a:	4293      	cmp	r3, r2
 800042c:	d109      	bne.n	8000442 <I2C_Init+0xba>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 800042e:	683b      	ldr	r3, [r7, #0]
 8000430:	681a      	ldr	r2, [r3, #0]
 8000432:	4613      	mov	r3, r2
 8000434:	005b      	lsls	r3, r3, #1
 8000436:	4413      	add	r3, r2
 8000438:	69fa      	ldr	r2, [r7, #28]
 800043a:	fbb2 f3f3 	udiv	r3, r2, r3
 800043e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000440:	e00e      	b.n	8000460 <I2C_Init+0xd8>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 8000442:	683b      	ldr	r3, [r7, #0]
 8000444:	681a      	ldr	r2, [r3, #0]
 8000446:	4613      	mov	r3, r2
 8000448:	009b      	lsls	r3, r3, #2
 800044a:	4413      	add	r3, r2
 800044c:	009a      	lsls	r2, r3, #2
 800044e:	4413      	add	r3, r2
 8000450:	69fa      	ldr	r2, [r7, #28]
 8000452:	fbb2 f3f3 	udiv	r3, r2, r3
 8000456:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 8000458:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800045a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800045e:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & CCR_CCR_Set) == 0)
 8000460:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000462:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000466:	2b00      	cmp	r3, #0
 8000468:	d103      	bne.n	8000472 <I2C_Init+0xea>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 800046a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800046c:	f043 0301 	orr.w	r3, r3, #1
 8000470:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | CCR_FS_Set);
 8000472:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000474:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000476:	4313      	orrs	r3, r2
 8000478:	b29b      	uxth	r3, r3
 800047a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800047e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000482:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 8000484:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000486:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800048a:	fb02 f303 	mul.w	r3, r2, r3
 800048e:	4a1e      	ldr	r2, [pc, #120]	; (8000508 <I2C_Init+0x180>)
 8000490:	fb82 1203 	smull	r1, r2, r2, r3
 8000494:	1192      	asrs	r2, r2, #6
 8000496:	17db      	asrs	r3, r3, #31
 8000498:	1ad3      	subs	r3, r2, r3
 800049a:	b29b      	uxth	r3, r3
 800049c:	3301      	adds	r3, #1
 800049e:	b29a      	uxth	r2, r3
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80004a8:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= CR1_PE_Set;
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	881b      	ldrh	r3, [r3, #0]
 80004ae:	b29b      	uxth	r3, r3
 80004b0:	f043 0301 	orr.w	r3, r3, #1
 80004b4:	b29a      	uxth	r2, r3
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	881b      	ldrh	r3, [r3, #0]
 80004be:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_Mask;
 80004c0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80004c2:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 80004c6:	f023 0302 	bic.w	r3, r3, #2
 80004ca:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 80004cc:	683b      	ldr	r3, [r7, #0]
 80004ce:	889a      	ldrh	r2, [r3, #4]
 80004d0:	683b      	ldr	r3, [r7, #0]
 80004d2:	895b      	ldrh	r3, [r3, #10]
 80004d4:	4313      	orrs	r3, r2
 80004d6:	b29a      	uxth	r2, r3
 80004d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80004da:	4313      	orrs	r3, r2
 80004dc:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80004e2:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 80004e4:	683b      	ldr	r3, [r7, #0]
 80004e6:	899a      	ldrh	r2, [r3, #12]
 80004e8:	683b      	ldr	r3, [r7, #0]
 80004ea:	891b      	ldrh	r3, [r3, #8]
 80004ec:	4313      	orrs	r3, r2
 80004ee:	b29a      	uxth	r2, r3
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	811a      	strh	r2, [r3, #8]
}
 80004f4:	bf00      	nop
 80004f6:	3728      	adds	r7, #40	; 0x28
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	007a1200 	.word	0x007a1200
 8000500:	431bde83 	.word	0x431bde83
 8000504:	000186a0 	.word	0x000186a0
 8000508:	10624dd3 	.word	0x10624dd3

0800050c <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800050c:	b480      	push	{r7}
 800050e:	b083      	sub	sp, #12
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
 8000514:	460b      	mov	r3, r1
 8000516:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000518:	78fb      	ldrb	r3, [r7, #3]
 800051a:	2b00      	cmp	r3, #0
 800051c:	d008      	beq.n	8000530 <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= CR1_PE_Set;
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	881b      	ldrh	r3, [r3, #0]
 8000522:	b29b      	uxth	r3, r3
 8000524:	f043 0301 	orr.w	r3, r3, #1
 8000528:	b29a      	uxth	r2, r3
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= CR1_PE_Reset;
  }
}
 800052e:	e007      	b.n	8000540 <I2C_Cmd+0x34>
    I2Cx->CR1 &= CR1_PE_Reset;
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	881b      	ldrh	r3, [r3, #0]
 8000534:	b29b      	uxth	r3, r3
 8000536:	f023 0301 	bic.w	r3, r3, #1
 800053a:	b29a      	uxth	r2, r3
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	801a      	strh	r2, [r3, #0]
}
 8000540:	bf00      	nop
 8000542:	370c      	adds	r7, #12
 8000544:	46bd      	mov	sp, r7
 8000546:	bc80      	pop	{r7}
 8000548:	4770      	bx	lr

0800054a <I2C_GenerateSTART>:
  * @param  NewState: new state of the I2C START condition generation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800054a:	b480      	push	{r7}
 800054c:	b083      	sub	sp, #12
 800054e:	af00      	add	r7, sp, #0
 8000550:	6078      	str	r0, [r7, #4]
 8000552:	460b      	mov	r3, r1
 8000554:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000556:	78fb      	ldrb	r3, [r7, #3]
 8000558:	2b00      	cmp	r3, #0
 800055a:	d008      	beq.n	800056e <I2C_GenerateSTART+0x24>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= CR1_START_Set;
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	881b      	ldrh	r3, [r3, #0]
 8000560:	b29b      	uxth	r3, r3
 8000562:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000566:	b29a      	uxth	r2, r3
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= CR1_START_Reset;
  }
}
 800056c:	e007      	b.n	800057e <I2C_GenerateSTART+0x34>
    I2Cx->CR1 &= CR1_START_Reset;
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	881b      	ldrh	r3, [r3, #0]
 8000572:	b29b      	uxth	r3, r3
 8000574:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000578:	b29a      	uxth	r2, r3
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	801a      	strh	r2, [r3, #0]
}
 800057e:	bf00      	nop
 8000580:	370c      	adds	r7, #12
 8000582:	46bd      	mov	sp, r7
 8000584:	bc80      	pop	{r7}
 8000586:	4770      	bx	lr

08000588 <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8000588:	b480      	push	{r7}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
 8000590:	460b      	mov	r3, r1
 8000592:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000594:	78fb      	ldrb	r3, [r7, #3]
 8000596:	2b00      	cmp	r3, #0
 8000598:	d008      	beq.n	80005ac <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= CR1_STOP_Set;
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	881b      	ldrh	r3, [r3, #0]
 800059e:	b29b      	uxth	r3, r3
 80005a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005a4:	b29a      	uxth	r2, r3
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= CR1_STOP_Reset;
  }
}
 80005aa:	e007      	b.n	80005bc <I2C_GenerateSTOP+0x34>
    I2Cx->CR1 &= CR1_STOP_Reset;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	881b      	ldrh	r3, [r3, #0]
 80005b0:	b29b      	uxth	r3, r3
 80005b2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80005b6:	b29a      	uxth	r2, r3
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	801a      	strh	r2, [r3, #0]
}
 80005bc:	bf00      	nop
 80005be:	370c      	adds	r7, #12
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bc80      	pop	{r7}
 80005c4:	4770      	bx	lr

080005c6 <I2C_AcknowledgeConfig>:
  * @param  NewState: new state of the I2C Acknowledgement.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80005c6:	b480      	push	{r7}
 80005c8:	b083      	sub	sp, #12
 80005ca:	af00      	add	r7, sp, #0
 80005cc:	6078      	str	r0, [r7, #4]
 80005ce:	460b      	mov	r3, r1
 80005d0:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80005d2:	78fb      	ldrb	r3, [r7, #3]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d008      	beq.n	80005ea <I2C_AcknowledgeConfig+0x24>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= CR1_ACK_Set;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	881b      	ldrh	r3, [r3, #0]
 80005dc:	b29b      	uxth	r3, r3
 80005de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005e2:	b29a      	uxth	r2, r3
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= CR1_ACK_Reset;
  }
}
 80005e8:	e007      	b.n	80005fa <I2C_AcknowledgeConfig+0x34>
    I2Cx->CR1 &= CR1_ACK_Reset;
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	881b      	ldrh	r3, [r3, #0]
 80005ee:	b29b      	uxth	r3, r3
 80005f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80005f4:	b29a      	uxth	r2, r3
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	801a      	strh	r2, [r3, #0]
}
 80005fa:	bf00      	nop
 80005fc:	370c      	adds	r7, #12
 80005fe:	46bd      	mov	sp, r7
 8000600:	bc80      	pop	{r7}
 8000602:	4770      	bx	lr

08000604 <I2C_SendData>:
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
 800060c:	460b      	mov	r3, r1
 800060e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 8000610:	78fb      	ldrb	r3, [r7, #3]
 8000612:	b29a      	uxth	r2, r3
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	821a      	strh	r2, [r3, #16]
}
 8000618:	bf00      	nop
 800061a:	370c      	adds	r7, #12
 800061c:	46bd      	mov	sp, r7
 800061e:	bc80      	pop	{r7}
 8000620:	4770      	bx	lr

08000622 <I2C_ReceiveData>:
  * @brief  Returns the most recent received data by the I2Cx peripheral.
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @retval The value of the received data.
  */
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
 8000622:	b480      	push	{r7}
 8000624:	b083      	sub	sp, #12
 8000626:	af00      	add	r7, sp, #0
 8000628:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	8a1b      	ldrh	r3, [r3, #16]
 800062e:	b29b      	uxth	r3, r3
 8000630:	b2db      	uxtb	r3, r3
}
 8000632:	4618      	mov	r0, r3
 8000634:	370c      	adds	r7, #12
 8000636:	46bd      	mov	sp, r7
 8000638:	bc80      	pop	{r7}
 800063a:	4770      	bx	lr

0800063c <I2C_Send7bitAddress>:
  *     @arg I2C_Direction_Transmitter: Transmitter mode
  *     @arg I2C_Direction_Receiver: Receiver mode
  * @retval None.
  */
void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
{
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
 8000644:	460b      	mov	r3, r1
 8000646:	70fb      	strb	r3, [r7, #3]
 8000648:	4613      	mov	r3, r2
 800064a:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 800064c:	78bb      	ldrb	r3, [r7, #2]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d004      	beq.n	800065c <I2C_Send7bitAddress+0x20>
  {
    /* Set the address bit0 for read */
    Address |= OAR1_ADD0_Set;
 8000652:	78fb      	ldrb	r3, [r7, #3]
 8000654:	f043 0301 	orr.w	r3, r3, #1
 8000658:	70fb      	strb	r3, [r7, #3]
 800065a:	e003      	b.n	8000664 <I2C_Send7bitAddress+0x28>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= OAR1_ADD0_Reset;
 800065c:	78fb      	ldrb	r3, [r7, #3]
 800065e:	f023 0301 	bic.w	r3, r3, #1
 8000662:	70fb      	strb	r3, [r7, #3]
  }
  /* Send the address */
  I2Cx->DR = Address;
 8000664:	78fb      	ldrb	r3, [r7, #3]
 8000666:	b29a      	uxth	r2, r3
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	821a      	strh	r2, [r3, #16]
}
 800066c:	bf00      	nop
 800066e:	370c      	adds	r7, #12
 8000670:	46bd      	mov	sp, r7
 8000672:	bc80      	pop	{r7}
 8000674:	4770      	bx	lr

08000676 <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  * - SUCCESS: Last event is equal to the I2C_EVENT
  * - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 8000676:	b480      	push	{r7}
 8000678:	b087      	sub	sp, #28
 800067a:	af00      	add	r7, sp, #0
 800067c:	6078      	str	r0, [r7, #4]
 800067e:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 8000680:	2300      	movs	r3, #0
 8000682:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 8000684:	2300      	movs	r3, #0
 8000686:	60fb      	str	r3, [r7, #12]
 8000688:	2300      	movs	r3, #0
 800068a:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 800068c:	2300      	movs	r3, #0
 800068e:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	8a9b      	ldrh	r3, [r3, #20]
 8000694:	b29b      	uxth	r3, r3
 8000696:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	8b1b      	ldrh	r3, [r3, #24]
 800069c:	b29b      	uxth	r3, r3
 800069e:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 80006a0:	68bb      	ldr	r3, [r7, #8]
 80006a2:	041b      	lsls	r3, r3, #16
 80006a4:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_Mask;
 80006a6:	68fa      	ldr	r2, [r7, #12]
 80006a8:	68bb      	ldr	r3, [r7, #8]
 80006aa:	4313      	orrs	r3, r2
 80006ac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80006b0:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 80006b2:	693a      	ldr	r2, [r7, #16]
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	401a      	ands	r2, r3
 80006b8:	683b      	ldr	r3, [r7, #0]
 80006ba:	429a      	cmp	r2, r3
 80006bc:	d102      	bne.n	80006c4 <I2C_CheckEvent+0x4e>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 80006be:	2301      	movs	r3, #1
 80006c0:	75fb      	strb	r3, [r7, #23]
 80006c2:	e001      	b.n	80006c8 <I2C_CheckEvent+0x52>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 80006c4:	2300      	movs	r3, #0
 80006c6:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 80006c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80006ca:	4618      	mov	r0, r3
 80006cc:	371c      	adds	r7, #28
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bc80      	pop	{r7}
 80006d2:	4770      	bx	lr

080006d4 <I2C_GetFlagStatus>:
  *   Address matched flag (Slave mode)"ENDA"
  *     @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b087      	sub	sp, #28
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
 80006dc:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80006de:	2300      	movs	r3, #0
 80006e0:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 80006e2:	2300      	movs	r3, #0
 80006e4:	613b      	str	r3, [r7, #16]
 80006e6:	2300      	movs	r3, #0
 80006e8:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	60fb      	str	r3, [r7, #12]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 80006ee:	683b      	ldr	r3, [r7, #0]
 80006f0:	0f1b      	lsrs	r3, r3, #28
 80006f2:	613b      	str	r3, [r7, #16]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_Mask;
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80006fa:	603b      	str	r3, [r7, #0]
  
  if(i2creg != 0)
 80006fc:	693b      	ldr	r3, [r7, #16]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d003      	beq.n	800070a <I2C_GetFlagStatus+0x36>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	3314      	adds	r3, #20
 8000706:	60fb      	str	r3, [r7, #12]
 8000708:	e005      	b.n	8000716 <I2C_GetFlagStatus+0x42>
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 800070a:	683b      	ldr	r3, [r7, #0]
 800070c:	0c1b      	lsrs	r3, r3, #16
 800070e:	603b      	str	r3, [r7, #0]
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	3318      	adds	r3, #24
 8000714:	60fb      	str	r3, [r7, #12]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	681a      	ldr	r2, [r3, #0]
 800071a:	683b      	ldr	r3, [r7, #0]
 800071c:	4013      	ands	r3, r2
 800071e:	2b00      	cmp	r3, #0
 8000720:	d002      	beq.n	8000728 <I2C_GetFlagStatus+0x54>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 8000722:	2301      	movs	r3, #1
 8000724:	75fb      	strb	r3, [r7, #23]
 8000726:	e001      	b.n	800072c <I2C_GetFlagStatus+0x58>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 8000728:	2300      	movs	r3, #0
 800072a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
 800072c:	7dfb      	ldrb	r3, [r7, #23]
}
 800072e:	4618      	mov	r0, r3
 8000730:	371c      	adds	r7, #28
 8000732:	46bd      	mov	sp, r7
 8000734:	bc80      	pop	{r7}
 8000736:	4770      	bx	lr

08000738 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000738:	b480      	push	{r7}
 800073a:	b089      	sub	sp, #36	; 0x24
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 8000740:	2300      	movs	r3, #0
 8000742:	61fb      	str	r3, [r7, #28]
 8000744:	2300      	movs	r3, #0
 8000746:	61bb      	str	r3, [r7, #24]
 8000748:	2300      	movs	r3, #0
 800074a:	617b      	str	r3, [r7, #20]
 800074c:	2300      	movs	r3, #0
 800074e:	613b      	str	r3, [r7, #16]
#ifdef  STM32F10X_CL
  uint32_t prediv1source = 0, prediv1factor = 0, prediv2factor = 0, pll2mull = 0;
#endif /* STM32F10X_CL */

#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
 8000750:	2300      	movs	r3, #0
 8000752:	60fb      	str	r3, [r7, #12]
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8000754:	4b4a      	ldr	r3, [pc, #296]	; (8000880 <RCC_GetClocksFreq+0x148>)
 8000756:	685b      	ldr	r3, [r3, #4]
 8000758:	f003 030c 	and.w	r3, r3, #12
 800075c:	61fb      	str	r3, [r7, #28]
  
  switch (tmp)
 800075e:	69fb      	ldr	r3, [r7, #28]
 8000760:	2b04      	cmp	r3, #4
 8000762:	d007      	beq.n	8000774 <RCC_GetClocksFreq+0x3c>
 8000764:	2b08      	cmp	r3, #8
 8000766:	d009      	beq.n	800077c <RCC_GetClocksFreq+0x44>
 8000768:	2b00      	cmp	r3, #0
 800076a:	d12f      	bne.n	80007cc <RCC_GetClocksFreq+0x94>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	4a45      	ldr	r2, [pc, #276]	; (8000884 <RCC_GetClocksFreq+0x14c>)
 8000770:	601a      	str	r2, [r3, #0]
      break;
 8000772:	e02f      	b.n	80007d4 <RCC_GetClocksFreq+0x9c>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	4a43      	ldr	r2, [pc, #268]	; (8000884 <RCC_GetClocksFreq+0x14c>)
 8000778:	601a      	str	r2, [r3, #0]
      break;
 800077a:	e02b      	b.n	80007d4 <RCC_GetClocksFreq+0x9c>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 800077c:	4b40      	ldr	r3, [pc, #256]	; (8000880 <RCC_GetClocksFreq+0x148>)
 800077e:	685b      	ldr	r3, [r3, #4]
 8000780:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000784:	61bb      	str	r3, [r7, #24]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 8000786:	4b3e      	ldr	r3, [pc, #248]	; (8000880 <RCC_GetClocksFreq+0x148>)
 8000788:	685b      	ldr	r3, [r3, #4]
 800078a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800078e:	617b      	str	r3, [r7, #20]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8000790:	69bb      	ldr	r3, [r7, #24]
 8000792:	0c9b      	lsrs	r3, r3, #18
 8000794:	3302      	adds	r3, #2
 8000796:	61bb      	str	r3, [r7, #24]
      
      if (pllsource == 0x00)
 8000798:	697b      	ldr	r3, [r7, #20]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d106      	bne.n	80007ac <RCC_GetClocksFreq+0x74>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 800079e:	69bb      	ldr	r3, [r7, #24]
 80007a0:	4a39      	ldr	r2, [pc, #228]	; (8000888 <RCC_GetClocksFreq+0x150>)
 80007a2:	fb02 f203 	mul.w	r2, r2, r3
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 80007aa:	e013      	b.n	80007d4 <RCC_GetClocksFreq+0x9c>
       prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
 80007ac:	4b34      	ldr	r3, [pc, #208]	; (8000880 <RCC_GetClocksFreq+0x148>)
 80007ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007b0:	f003 030f 	and.w	r3, r3, #15
 80007b4:	3301      	adds	r3, #1
 80007b6:	60fb      	str	r3, [r7, #12]
       RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull; 
 80007b8:	4a32      	ldr	r2, [pc, #200]	; (8000884 <RCC_GetClocksFreq+0x14c>)
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80007c0:	69ba      	ldr	r2, [r7, #24]
 80007c2:	fb02 f203 	mul.w	r2, r2, r3
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	601a      	str	r2, [r3, #0]
      break;
 80007ca:	e003      	b.n	80007d4 <RCC_GetClocksFreq+0x9c>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	4a2d      	ldr	r2, [pc, #180]	; (8000884 <RCC_GetClocksFreq+0x14c>)
 80007d0:	601a      	str	r2, [r3, #0]
      break;
 80007d2:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 80007d4:	4b2a      	ldr	r3, [pc, #168]	; (8000880 <RCC_GetClocksFreq+0x148>)
 80007d6:	685b      	ldr	r3, [r3, #4]
 80007d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80007dc:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 4;
 80007de:	69fb      	ldr	r3, [r7, #28]
 80007e0:	091b      	lsrs	r3, r3, #4
 80007e2:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 80007e4:	4a29      	ldr	r2, [pc, #164]	; (800088c <RCC_GetClocksFreq+0x154>)
 80007e6:	69fb      	ldr	r3, [r7, #28]
 80007e8:	4413      	add	r3, r2
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	613b      	str	r3, [r7, #16]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681a      	ldr	r2, [r3, #0]
 80007f4:	693b      	ldr	r3, [r7, #16]
 80007f6:	40da      	lsrs	r2, r3
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 80007fc:	4b20      	ldr	r3, [pc, #128]	; (8000880 <RCC_GetClocksFreq+0x148>)
 80007fe:	685b      	ldr	r3, [r3, #4]
 8000800:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000804:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 8;
 8000806:	69fb      	ldr	r3, [r7, #28]
 8000808:	0a1b      	lsrs	r3, r3, #8
 800080a:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 800080c:	4a1f      	ldr	r2, [pc, #124]	; (800088c <RCC_GetClocksFreq+0x154>)
 800080e:	69fb      	ldr	r3, [r7, #28]
 8000810:	4413      	add	r3, r2
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	b2db      	uxtb	r3, r3
 8000816:	613b      	str	r3, [r7, #16]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	685a      	ldr	r2, [r3, #4]
 800081c:	693b      	ldr	r3, [r7, #16]
 800081e:	40da      	lsrs	r2, r3
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8000824:	4b16      	ldr	r3, [pc, #88]	; (8000880 <RCC_GetClocksFreq+0x148>)
 8000826:	685b      	ldr	r3, [r3, #4]
 8000828:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800082c:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 11;
 800082e:	69fb      	ldr	r3, [r7, #28]
 8000830:	0adb      	lsrs	r3, r3, #11
 8000832:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 8000834:	4a15      	ldr	r2, [pc, #84]	; (800088c <RCC_GetClocksFreq+0x154>)
 8000836:	69fb      	ldr	r3, [r7, #28]
 8000838:	4413      	add	r3, r2
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	b2db      	uxtb	r3, r3
 800083e:	613b      	str	r3, [r7, #16]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	685a      	ldr	r2, [r3, #4]
 8000844:	693b      	ldr	r3, [r7, #16]
 8000846:	40da      	lsrs	r2, r3
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 800084c:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <RCC_GetClocksFreq+0x148>)
 800084e:	685b      	ldr	r3, [r3, #4]
 8000850:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000854:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 14;
 8000856:	69fb      	ldr	r3, [r7, #28]
 8000858:	0b9b      	lsrs	r3, r3, #14
 800085a:	61fb      	str	r3, [r7, #28]
  presc = ADCPrescTable[tmp];
 800085c:	4a0c      	ldr	r2, [pc, #48]	; (8000890 <RCC_GetClocksFreq+0x158>)
 800085e:	69fb      	ldr	r3, [r7, #28]
 8000860:	4413      	add	r3, r2
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	b2db      	uxtb	r3, r3
 8000866:	613b      	str	r3, [r7, #16]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	68da      	ldr	r2, [r3, #12]
 800086c:	693b      	ldr	r3, [r7, #16]
 800086e:	fbb2 f2f3 	udiv	r2, r2, r3
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	611a      	str	r2, [r3, #16]
}
 8000876:	bf00      	nop
 8000878:	3724      	adds	r7, #36	; 0x24
 800087a:	46bd      	mov	sp, r7
 800087c:	bc80      	pop	{r7}
 800087e:	4770      	bx	lr
 8000880:	40021000 	.word	0x40021000
 8000884:	007a1200 	.word	0x007a1200
 8000888:	003d0900 	.word	0x003d0900
 800088c:	20000000 	.word	0x20000000
 8000890:	20000010 	.word	0x20000010

08000894 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	460b      	mov	r3, r1
 800089e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80008a0:	78fb      	ldrb	r3, [r7, #3]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d006      	beq.n	80008b4 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80008a6:	4909      	ldr	r1, [pc, #36]	; (80008cc <RCC_APB2PeriphClockCmd+0x38>)
 80008a8:	4b08      	ldr	r3, [pc, #32]	; (80008cc <RCC_APB2PeriphClockCmd+0x38>)
 80008aa:	699a      	ldr	r2, [r3, #24]
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	4313      	orrs	r3, r2
 80008b0:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80008b2:	e006      	b.n	80008c2 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80008b4:	4905      	ldr	r1, [pc, #20]	; (80008cc <RCC_APB2PeriphClockCmd+0x38>)
 80008b6:	4b05      	ldr	r3, [pc, #20]	; (80008cc <RCC_APB2PeriphClockCmd+0x38>)
 80008b8:	699a      	ldr	r2, [r3, #24]
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	43db      	mvns	r3, r3
 80008be:	4013      	ands	r3, r2
 80008c0:	618b      	str	r3, [r1, #24]
}
 80008c2:	bf00      	nop
 80008c4:	370c      	adds	r7, #12
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bc80      	pop	{r7}
 80008ca:	4770      	bx	lr
 80008cc:	40021000 	.word	0x40021000

080008d0 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
 80008d8:	460b      	mov	r3, r1
 80008da:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80008dc:	78fb      	ldrb	r3, [r7, #3]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d006      	beq.n	80008f0 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80008e2:	4909      	ldr	r1, [pc, #36]	; (8000908 <RCC_APB1PeriphClockCmd+0x38>)
 80008e4:	4b08      	ldr	r3, [pc, #32]	; (8000908 <RCC_APB1PeriphClockCmd+0x38>)
 80008e6:	69da      	ldr	r2, [r3, #28]
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	4313      	orrs	r3, r2
 80008ec:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 80008ee:	e006      	b.n	80008fe <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80008f0:	4905      	ldr	r1, [pc, #20]	; (8000908 <RCC_APB1PeriphClockCmd+0x38>)
 80008f2:	4b05      	ldr	r3, [pc, #20]	; (8000908 <RCC_APB1PeriphClockCmd+0x38>)
 80008f4:	69da      	ldr	r2, [r3, #28]
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	43db      	mvns	r3, r3
 80008fa:	4013      	ands	r3, r2
 80008fc:	61cb      	str	r3, [r1, #28]
}
 80008fe:	bf00      	nop
 8000900:	370c      	adds	r7, #12
 8000902:	46bd      	mov	sp, r7
 8000904:	bc80      	pop	{r7}
 8000906:	4770      	bx	lr
 8000908:	40021000 	.word	0x40021000

0800090c <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 800090c:	b480      	push	{r7}
 800090e:	b085      	sub	sp, #20
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
 8000914:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8000916:	2300      	movs	r3, #0
 8000918:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	881b      	ldrh	r3, [r3, #0]
 800091e:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_Mask;
 8000920:	89fb      	ldrh	r3, [r7, #14]
 8000922:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 8000926:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	881a      	ldrh	r2, [r3, #0]
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	885b      	ldrh	r3, [r3, #2]
 8000930:	4313      	orrs	r3, r2
 8000932:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	889b      	ldrh	r3, [r3, #4]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000938:	4313      	orrs	r3, r2
 800093a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	88db      	ldrh	r3, [r3, #6]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000940:	4313      	orrs	r3, r2
 8000942:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	891b      	ldrh	r3, [r3, #8]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000948:	4313      	orrs	r3, r2
 800094a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000950:	4313      	orrs	r3, r2
 8000952:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	899b      	ldrh	r3, [r3, #12]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000958:	4313      	orrs	r3, r2
 800095a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	89db      	ldrh	r3, [r3, #14]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000960:	4313      	orrs	r3, r2
 8000962:	b29a      	uxth	r2, r3
 8000964:	89fb      	ldrh	r3, [r7, #14]
 8000966:	4313      	orrs	r3, r2
 8000968:	81fb      	strh	r3, [r7, #14]
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	89fa      	ldrh	r2, [r7, #14]
 800096e:	801a      	strh	r2, [r3, #0]
  
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= SPI_Mode_Select;		
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	8b9b      	ldrh	r3, [r3, #28]
 8000974:	b29b      	uxth	r3, r3
 8000976:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800097a:	b29a      	uxth	r2, r3
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	839a      	strh	r2, [r3, #28]

/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	8a1a      	ldrh	r2, [r3, #16]
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	821a      	strh	r2, [r3, #16]
}
 8000988:	bf00      	nop
 800098a:	3714      	adds	r7, #20
 800098c:	46bd      	mov	sp, r7
 800098e:	bc80      	pop	{r7}
 8000990:	4770      	bx	lr

08000992 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8000992:	b480      	push	{r7}
 8000994:	b083      	sub	sp, #12
 8000996:	af00      	add	r7, sp, #0
 8000998:	6078      	str	r0, [r7, #4]
 800099a:	460b      	mov	r3, r1
 800099c:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800099e:	78fb      	ldrb	r3, [r7, #3]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d008      	beq.n	80009b6 <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= CR1_SPE_Set;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	881b      	ldrh	r3, [r3, #0]
 80009a8:	b29b      	uxth	r3, r3
 80009aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009ae:	b29a      	uxth	r2, r3
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= CR1_SPE_Reset;
  }
}
 80009b4:	e007      	b.n	80009c6 <SPI_Cmd+0x34>
    SPIx->CR1 &= CR1_SPE_Reset;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	881b      	ldrh	r3, [r3, #0]
 80009ba:	b29b      	uxth	r3, r3
 80009bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80009c0:	b29a      	uxth	r2, r3
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	801a      	strh	r2, [r3, #0]
}
 80009c6:	bf00      	nop
 80009c8:	370c      	adds	r7, #12
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bc80      	pop	{r7}
 80009ce:	4770      	bx	lr

080009d0 <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for the 
  *         specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b085      	sub	sp, #20
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
 80009d8:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 80009da:	2300      	movs	r3, #0
 80009dc:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	881b      	ldrh	r3, [r3, #0]
 80009e2:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	4a2e      	ldr	r2, [pc, #184]	; (8000aa0 <TIM_TimeBaseInit+0xd0>)
 80009e8:	4293      	cmp	r3, r2
 80009ea:	d013      	beq.n	8000a14 <TIM_TimeBaseInit+0x44>
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	4a2d      	ldr	r2, [pc, #180]	; (8000aa4 <TIM_TimeBaseInit+0xd4>)
 80009f0:	4293      	cmp	r3, r2
 80009f2:	d00f      	beq.n	8000a14 <TIM_TimeBaseInit+0x44>
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009fa:	d00b      	beq.n	8000a14 <TIM_TimeBaseInit+0x44>
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	4a2a      	ldr	r2, [pc, #168]	; (8000aa8 <TIM_TimeBaseInit+0xd8>)
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d007      	beq.n	8000a14 <TIM_TimeBaseInit+0x44>
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	4a29      	ldr	r2, [pc, #164]	; (8000aac <TIM_TimeBaseInit+0xdc>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d003      	beq.n	8000a14 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	4a28      	ldr	r2, [pc, #160]	; (8000ab0 <TIM_TimeBaseInit+0xe0>)
 8000a10:	4293      	cmp	r3, r2
 8000a12:	d108      	bne.n	8000a26 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 8000a14:	89fb      	ldrh	r3, [r7, #14]
 8000a16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000a1a:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	885a      	ldrh	r2, [r3, #2]
 8000a20:	89fb      	ldrh	r3, [r7, #14]
 8000a22:	4313      	orrs	r3, r2
 8000a24:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	4a22      	ldr	r2, [pc, #136]	; (8000ab4 <TIM_TimeBaseInit+0xe4>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d00c      	beq.n	8000a48 <TIM_TimeBaseInit+0x78>
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	4a21      	ldr	r2, [pc, #132]	; (8000ab8 <TIM_TimeBaseInit+0xe8>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d008      	beq.n	8000a48 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 8000a36:	89fb      	ldrh	r3, [r7, #14]
 8000a38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000a3c:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	88da      	ldrh	r2, [r3, #6]
 8000a42:	89fb      	ldrh	r3, [r7, #14]
 8000a44:	4313      	orrs	r3, r2
 8000a46:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	89fa      	ldrh	r2, [r7, #14]
 8000a4c:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	889a      	ldrh	r2, [r3, #4]
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	859a      	strh	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	881a      	ldrh	r2, [r3, #0]
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	4a0f      	ldr	r2, [pc, #60]	; (8000aa0 <TIM_TimeBaseInit+0xd0>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d00f      	beq.n	8000a86 <TIM_TimeBaseInit+0xb6>
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	4a0e      	ldr	r2, [pc, #56]	; (8000aa4 <TIM_TimeBaseInit+0xd4>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d00b      	beq.n	8000a86 <TIM_TimeBaseInit+0xb6>
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	4a12      	ldr	r2, [pc, #72]	; (8000abc <TIM_TimeBaseInit+0xec>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d007      	beq.n	8000a86 <TIM_TimeBaseInit+0xb6>
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	4a11      	ldr	r2, [pc, #68]	; (8000ac0 <TIM_TimeBaseInit+0xf0>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d003      	beq.n	8000a86 <TIM_TimeBaseInit+0xb6>
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	4a10      	ldr	r2, [pc, #64]	; (8000ac4 <TIM_TimeBaseInit+0xf4>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d104      	bne.n	8000a90 <TIM_TimeBaseInit+0xc0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	7a1b      	ldrb	r3, [r3, #8]
 8000a8a:	b29a      	uxth	r2, r3
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	2201      	movs	r2, #1
 8000a94:	829a      	strh	r2, [r3, #20]
}
 8000a96:	bf00      	nop
 8000a98:	3714      	adds	r7, #20
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bc80      	pop	{r7}
 8000a9e:	4770      	bx	lr
 8000aa0:	40012c00 	.word	0x40012c00
 8000aa4:	40013400 	.word	0x40013400
 8000aa8:	40000400 	.word	0x40000400
 8000aac:	40000800 	.word	0x40000800
 8000ab0:	40000c00 	.word	0x40000c00
 8000ab4:	40001000 	.word	0x40001000
 8000ab8:	40001400 	.word	0x40001400
 8000abc:	40014000 	.word	0x40014000
 8000ac0:	40014400 	.word	0x40014400
 8000ac4:	40014800 	.word	0x40014800

08000ac8 <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b085      	sub	sp, #20
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
 8000ad0:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	817b      	strh	r3, [r7, #10]
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	81fb      	strh	r3, [r7, #14]
 8000ada:	2300      	movs	r3, #0
 8000adc:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
 /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	8c1b      	ldrh	r3, [r3, #32]
 8000ae2:	b29b      	uxth	r3, r3
 8000ae4:	f023 0301 	bic.w	r3, r3, #1
 8000ae8:	b29a      	uxth	r2, r3
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	841a      	strh	r2, [r3, #32]
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	8c1b      	ldrh	r3, [r3, #32]
 8000af2:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	889b      	ldrh	r3, [r3, #4]
 8000af8:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	8b1b      	ldrh	r3, [r3, #24]
 8000afe:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC1M));
 8000b00:	897b      	ldrh	r3, [r7, #10]
 8000b02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000b06:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
 8000b08:	897b      	ldrh	r3, [r7, #10]
 8000b0a:	f023 0303 	bic.w	r3, r3, #3
 8000b0e:	817b      	strh	r3, [r7, #10]

  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	881a      	ldrh	r2, [r3, #0]
 8000b14:	897b      	ldrh	r3, [r7, #10]
 8000b16:	4313      	orrs	r3, r2
 8000b18:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 8000b1a:	89fb      	ldrh	r3, [r7, #14]
 8000b1c:	f023 0302 	bic.w	r3, r3, #2
 8000b20:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	891a      	ldrh	r2, [r3, #8]
 8000b26:	89fb      	ldrh	r3, [r7, #14]
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	885a      	ldrh	r2, [r3, #2]
 8000b30:	89fb      	ldrh	r3, [r7, #14]
 8000b32:	4313      	orrs	r3, r2
 8000b34:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4a24      	ldr	r2, [pc, #144]	; (8000bcc <TIM_OC1Init+0x104>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d00f      	beq.n	8000b5e <TIM_OC1Init+0x96>
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	4a23      	ldr	r2, [pc, #140]	; (8000bd0 <TIM_OC1Init+0x108>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d00b      	beq.n	8000b5e <TIM_OC1Init+0x96>
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	4a22      	ldr	r2, [pc, #136]	; (8000bd4 <TIM_OC1Init+0x10c>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d007      	beq.n	8000b5e <TIM_OC1Init+0x96>
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	4a21      	ldr	r2, [pc, #132]	; (8000bd8 <TIM_OC1Init+0x110>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d003      	beq.n	8000b5e <TIM_OC1Init+0x96>
     (TIMx == TIM16)|| (TIMx == TIM17))
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	4a20      	ldr	r2, [pc, #128]	; (8000bdc <TIM_OC1Init+0x114>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d123      	bne.n	8000ba6 <TIM_OC1Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NP));
 8000b5e:	89fb      	ldrh	r3, [r7, #14]
 8000b60:	f023 0308 	bic.w	r3, r3, #8
 8000b64:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	895a      	ldrh	r2, [r3, #10]
 8000b6a:	89fb      	ldrh	r3, [r7, #14]
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NE));    
 8000b70:	89fb      	ldrh	r3, [r7, #14]
 8000b72:	f023 0304 	bic.w	r3, r3, #4
 8000b76:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	889a      	ldrh	r2, [r3, #4]
 8000b7c:	89fb      	ldrh	r3, [r7, #14]
 8000b7e:	4313      	orrs	r3, r2
 8000b80:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1));
 8000b82:	89bb      	ldrh	r3, [r7, #12]
 8000b84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000b88:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1N));
 8000b8a:	89bb      	ldrh	r3, [r7, #12]
 8000b8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000b90:	81bb      	strh	r3, [r7, #12]
    
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	899a      	ldrh	r2, [r3, #12]
 8000b96:	89bb      	ldrh	r3, [r7, #12]
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	89da      	ldrh	r2, [r3, #14]
 8000ba0:	89bb      	ldrh	r3, [r7, #12]
 8000ba2:	4313      	orrs	r3, r2
 8000ba4:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	89ba      	ldrh	r2, [r7, #12]
 8000baa:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	897a      	ldrh	r2, [r7, #10]
 8000bb0:	831a      	strh	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse; 
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	88da      	ldrh	r2, [r3, #6]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	869a      	strh	r2, [r3, #52]	; 0x34
 
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	89fa      	ldrh	r2, [r7, #14]
 8000bbe:	841a      	strh	r2, [r3, #32]
}
 8000bc0:	bf00      	nop
 8000bc2:	3714      	adds	r7, #20
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bc80      	pop	{r7}
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	40012c00 	.word	0x40012c00
 8000bd0:	40013400 	.word	0x40013400
 8000bd4:	40014000 	.word	0x40014000
 8000bd8:	40014400 	.word	0x40014400
 8000bdc:	40014800 	.word	0x40014800

08000be0 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
 8000be8:	460b      	mov	r3, r1
 8000bea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000bec:	78fb      	ldrb	r3, [r7, #3]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d008      	beq.n	8000c04 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	881b      	ldrh	r3, [r3, #0]
 8000bf6:	b29b      	uxth	r3, r3
 8000bf8:	f043 0301 	orr.w	r3, r3, #1
 8000bfc:	b29a      	uxth	r2, r3
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
  }
}
 8000c02:	e007      	b.n	8000c14 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	881b      	ldrh	r3, [r3, #0]
 8000c08:	b29b      	uxth	r3, r3
 8000c0a:	f023 0301 	bic.w	r3, r3, #1
 8000c0e:	b29a      	uxth	r2, r3
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	801a      	strh	r2, [r3, #0]
}
 8000c14:	bf00      	nop
 8000c16:	370c      	adds	r7, #12
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bc80      	pop	{r7}
 8000c1c:	4770      	bx	lr

08000c1e <TIM_CtrlPWMOutputs>:
  * @param  NewState: new state of the TIM peripheral Main Outputs.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	b083      	sub	sp, #12
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	6078      	str	r0, [r7, #4]
 8000c26:	460b      	mov	r3, r1
 8000c28:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000c2a:	78fb      	ldrb	r3, [r7, #3]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d00c      	beq.n	8000c4a <TIM_CtrlPWMOutputs+0x2c>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000c36:	b29b      	uxth	r3, r3
 8000c38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000c3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000c40:	b29a      	uxth	r2, r3
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)(~((uint16_t)TIM_BDTR_MOE));
  }  
}
 8000c48:	e009      	b.n	8000c5e <TIM_CtrlPWMOutputs+0x40>
    TIMx->BDTR &= (uint16_t)(~((uint16_t)TIM_BDTR_MOE));
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000c50:	b29b      	uxth	r3, r3
 8000c52:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000c56:	b29a      	uxth	r2, r3
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
}
 8000c5e:	bf00      	nop
 8000c60:	370c      	adds	r7, #12
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bc80      	pop	{r7}
 8000c66:	4770      	bx	lr

08000c68 <TIM_OC1PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b085      	sub	sp, #20
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	460b      	mov	r3, r1
 8000c72:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8000c74:	2300      	movs	r3, #0
 8000c76:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr1 = TIMx->CCMR1;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	8b1b      	ldrh	r3, [r3, #24]
 8000c7c:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1PE);
 8000c7e:	89fb      	ldrh	r3, [r7, #14]
 8000c80:	f023 0308 	bic.w	r3, r3, #8
 8000c84:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 8000c86:	89fa      	ldrh	r2, [r7, #14]
 8000c88:	887b      	ldrh	r3, [r7, #2]
 8000c8a:	4313      	orrs	r3, r2
 8000c8c:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	89fa      	ldrh	r2, [r7, #14]
 8000c92:	831a      	strh	r2, [r3, #24]
}
 8000c94:	bf00      	nop
 8000c96:	3714      	adds	r7, #20
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bc80      	pop	{r7}
 8000c9c:	4770      	bx	lr
	...

08000ca0 <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b08c      	sub	sp, #48	; 0x30
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
 8000ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8000caa:	2300      	movs	r3, #0
 8000cac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000cae:	2300      	movs	r3, #0
 8000cb0:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	8a1b      	ldrh	r3, [r3, #16]
 8000cc6:	b29b      	uxth	r3, r3
 8000cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
 8000cca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ccc:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	88db      	ldrh	r3, [r3, #6]
 8000cd8:	461a      	mov	r2, r3
 8000cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ce2:	b29a      	uxth	r2, r3
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	899b      	ldrh	r3, [r3, #12]
 8000cec:	b29b      	uxth	r3, r3
 8000cee:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 8000cf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000cf2:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	889a      	ldrh	r2, [r3, #4]
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	891b      	ldrh	r3, [r3, #8]
 8000d02:	4313      	orrs	r3, r2
 8000d04:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	b29b      	uxth	r3, r3
 8000d0e:	461a      	mov	r2, r3
 8000d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d12:	4313      	orrs	r3, r2
 8000d14:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8000d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d18:	b29a      	uxth	r2, r3
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	8a9b      	ldrh	r3, [r3, #20]
 8000d22:	b29b      	uxth	r3, r3
 8000d24:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
 8000d26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000d28:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	899b      	ldrh	r3, [r3, #12]
 8000d34:	461a      	mov	r2, r3
 8000d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8000d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d3e:	b29a      	uxth	r2, r3
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8000d44:	f107 0308 	add.w	r3, r7, #8
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f7ff fcf5 	bl	8000738 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	4a2e      	ldr	r2, [pc, #184]	; (8000e0c <USART_Init+0x16c>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d102      	bne.n	8000d5c <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d5a:	e001      	b.n	8000d60 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8000d5c:	693b      	ldr	r3, [r7, #16]
 8000d5e:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	899b      	ldrh	r3, [r3, #12]
 8000d64:	b29b      	uxth	r3, r3
 8000d66:	b21b      	sxth	r3, r3
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	da0c      	bge.n	8000d86 <USART_Init+0xe6>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8000d6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000d6e:	4613      	mov	r3, r2
 8000d70:	009b      	lsls	r3, r3, #2
 8000d72:	4413      	add	r3, r2
 8000d74:	009a      	lsls	r2, r3, #2
 8000d76:	441a      	add	r2, r3
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d82:	627b      	str	r3, [r7, #36]	; 0x24
 8000d84:	e00b      	b.n	8000d9e <USART_Init+0xfe>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8000d86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000d88:	4613      	mov	r3, r2
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	4413      	add	r3, r2
 8000d8e:	009a      	lsls	r2, r3, #2
 8000d90:	441a      	add	r2, r3
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	009b      	lsls	r3, r3, #2
 8000d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d9c:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
 8000d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da0:	4a1b      	ldr	r2, [pc, #108]	; (8000e10 <USART_Init+0x170>)
 8000da2:	fba2 2303 	umull	r2, r3, r2, r3
 8000da6:	095b      	lsrs	r3, r3, #5
 8000da8:	011b      	lsls	r3, r3, #4
 8000daa:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dae:	091b      	lsrs	r3, r3, #4
 8000db0:	2264      	movs	r2, #100	; 0x64
 8000db2:	fb02 f303 	mul.w	r3, r2, r3
 8000db6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000db8:	1ad3      	subs	r3, r2, r3
 8000dba:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	899b      	ldrh	r3, [r3, #12]
 8000dc0:	b29b      	uxth	r3, r3
 8000dc2:	b21b      	sxth	r3, r3
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	da0c      	bge.n	8000de2 <USART_Init+0x142>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8000dc8:	6a3b      	ldr	r3, [r7, #32]
 8000dca:	00db      	lsls	r3, r3, #3
 8000dcc:	3332      	adds	r3, #50	; 0x32
 8000dce:	4a10      	ldr	r2, [pc, #64]	; (8000e10 <USART_Init+0x170>)
 8000dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8000dd4:	095b      	lsrs	r3, r3, #5
 8000dd6:	f003 0307 	and.w	r3, r3, #7
 8000dda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000de0:	e00b      	b.n	8000dfa <USART_Init+0x15a>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8000de2:	6a3b      	ldr	r3, [r7, #32]
 8000de4:	011b      	lsls	r3, r3, #4
 8000de6:	3332      	adds	r3, #50	; 0x32
 8000de8:	4a09      	ldr	r2, [pc, #36]	; (8000e10 <USART_Init+0x170>)
 8000dea:	fba2 2303 	umull	r2, r3, r2, r3
 8000dee:	095b      	lsrs	r3, r3, #5
 8000df0:	f003 030f 	and.w	r3, r3, #15
 8000df4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000df6:	4313      	orrs	r3, r2
 8000df8:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 8000dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dfc:	b29a      	uxth	r2, r3
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	811a      	strh	r2, [r3, #8]
}
 8000e02:	bf00      	nop
 8000e04:	3730      	adds	r7, #48	; 0x30
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40013800 	.word	0x40013800
 8000e10:	51eb851f 	.word	0x51eb851f

08000e14 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	460b      	mov	r3, r1
 8000e1e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000e20:	78fb      	ldrb	r3, [r7, #3]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d008      	beq.n	8000e38 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	899b      	ldrh	r3, [r3, #12]
 8000e2a:	b29b      	uxth	r3, r3
 8000e2c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e30:	b29a      	uxth	r2, r3
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
  }
}
 8000e36:	e007      	b.n	8000e48 <USART_Cmd+0x34>
    USARTx->CR1 &= CR1_UE_Reset;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	899b      	ldrh	r3, [r3, #12]
 8000e3c:	b29b      	uxth	r3, r3
 8000e3e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000e42:	b29a      	uxth	r2, r3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	819a      	strh	r2, [r3, #12]
}
 8000e48:	bf00      	nop
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bc80      	pop	{r7}
 8000e50:	4770      	bx	lr

08000e52 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000e52:	b480      	push	{r7}
 8000e54:	b083      	sub	sp, #12
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
 8000e5a:	460b      	mov	r3, r1
 8000e5c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8000e5e:	887b      	ldrh	r3, [r7, #2]
 8000e60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000e64:	b29a      	uxth	r2, r3
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	809a      	strh	r2, [r3, #4]
}
 8000e6a:	bf00      	nop
 8000e6c:	370c      	adds	r7, #12
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bc80      	pop	{r7}
 8000e72:	4770      	bx	lr

08000e74 <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	460b      	mov	r3, r1
 8000e7e:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000e80:	2300      	movs	r3, #0
 8000e82:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }  
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	881b      	ldrh	r3, [r3, #0]
 8000e88:	b29a      	uxth	r2, r3
 8000e8a:	887b      	ldrh	r3, [r7, #2]
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	b29b      	uxth	r3, r3
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d002      	beq.n	8000e9a <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8000e94:	2301      	movs	r3, #1
 8000e96:	73fb      	strb	r3, [r7, #15]
 8000e98:	e001      	b.n	8000e9e <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000e9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3714      	adds	r7, #20
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bc80      	pop	{r7}
 8000ea8:	4770      	bx	lr
	...

08000eac <InitGPIOC>:
#include "stm32f10x.h"
#include "stm32f10x_conf.h"

void InitGPIOC()
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC,ENABLE);
 8000eb2:	2101      	movs	r1, #1
 8000eb4:	2010      	movs	r0, #16
 8000eb6:	f7ff fced 	bl	8000894 <RCC_APB2PeriphClockCmd>
	GPIO_InitTypeDef test;
	test.GPIO_Mode = GPIO_Mode_Out_PP;
 8000eba:	2310      	movs	r3, #16
 8000ebc:	71fb      	strb	r3, [r7, #7]
	test.GPIO_Pin = GPIO_Pin_13;
 8000ebe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ec2:	80bb      	strh	r3, [r7, #4]
	test.GPIO_Speed = GPIO_Speed_50MHz;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(GPIOC,&test);
 8000ec8:	1d3b      	adds	r3, r7, #4
 8000eca:	4619      	mov	r1, r3
 8000ecc:	4803      	ldr	r0, [pc, #12]	; (8000edc <InitGPIOC+0x30>)
 8000ece:	f7ff f99f 	bl	8000210 <GPIO_Init>
}
 8000ed2:	bf00      	nop
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40011000 	.word	0x40011000

08000ee0 <InitUsart2>:

void InitUsart2()
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO,ENABLE);
 8000ee6:	2101      	movs	r1, #1
 8000ee8:	2005      	movs	r0, #5
 8000eea:	f7ff fcd3 	bl	8000894 <RCC_APB2PeriphClockCmd>
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2,ENABLE);
 8000eee:	2101      	movs	r1, #1
 8000ef0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000ef4:	f7ff fcec 	bl	80008d0 <RCC_APB1PeriphClockCmd>
	GPIO_InitTypeDef GPIO_InitStructure;
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
 8000ef8:	2304      	movs	r3, #4
 8000efa:	82bb      	strh	r3, [r7, #20]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 8000efc:	2302      	movs	r3, #2
 8000efe:	75bb      	strb	r3, [r7, #22]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8000f00:	2318      	movs	r3, #24
 8000f02:	75fb      	strb	r3, [r7, #23]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000f04:	f107 0314 	add.w	r3, r7, #20
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4813      	ldr	r0, [pc, #76]	; (8000f58 <InitUsart2+0x78>)
 8000f0c:	f7ff f980 	bl	8000210 <GPIO_Init>

	/* PA10 = floating input */
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
 8000f10:	2308      	movs	r3, #8
 8000f12:	82bb      	strh	r3, [r7, #20]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8000f14:	2304      	movs	r3, #4
 8000f16:	75fb      	strb	r3, [r7, #23]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000f18:	f107 0314 	add.w	r3, r7, #20
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	480e      	ldr	r0, [pc, #56]	; (8000f58 <InitUsart2+0x78>)
 8000f20:	f7ff f976 	bl	8000210 <GPIO_Init>

	USART_InitTypeDef usart;
	usart.USART_BaudRate = 19200;
 8000f24:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
 8000f28:	607b      	str	r3, [r7, #4]
	usart.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	823b      	strh	r3, [r7, #16]
	usart.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8000f2e:	230c      	movs	r3, #12
 8000f30:	81fb      	strh	r3, [r7, #14]
	usart.USART_Parity = USART_Parity_No;
 8000f32:	2300      	movs	r3, #0
 8000f34:	81bb      	strh	r3, [r7, #12]
	usart.USART_StopBits = USART_StopBits_1;
 8000f36:	2300      	movs	r3, #0
 8000f38:	817b      	strh	r3, [r7, #10]
	usart.USART_WordLength = USART_WordLength_8b;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	813b      	strh	r3, [r7, #8]
	USART_Init(USART2, &usart);
 8000f3e:	1d3b      	adds	r3, r7, #4
 8000f40:	4619      	mov	r1, r3
 8000f42:	4806      	ldr	r0, [pc, #24]	; (8000f5c <InitUsart2+0x7c>)
 8000f44:	f7ff feac 	bl	8000ca0 <USART_Init>
	USART_Cmd(USART2,ENABLE);
 8000f48:	2101      	movs	r1, #1
 8000f4a:	4804      	ldr	r0, [pc, #16]	; (8000f5c <InitUsart2+0x7c>)
 8000f4c:	f7ff ff62 	bl	8000e14 <USART_Cmd>
}
 8000f50:	bf00      	nop
 8000f52:	3718      	adds	r7, #24
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	40010800 	.word	0x40010800
 8000f5c:	40004400 	.word	0x40004400

08000f60 <InitPwm>:

void InitPwm()
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b088      	sub	sp, #32
 8000f64:	af00      	add	r7, sp, #0
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO,ENABLE);
 8000f66:	2101      	movs	r1, #1
 8000f68:	2005      	movs	r0, #5
 8000f6a:	f7ff fc93 	bl	8000894 <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1 , ENABLE);
 8000f6e:	2101      	movs	r1, #1
 8000f70:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000f74:	f7ff fc8e 	bl	8000894 <RCC_APB2PeriphClockCmd>
	GPIO_InitTypeDef GPIO_InitStructure;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8000f78:	2318      	movs	r3, #24
 8000f7a:	77fb      	strb	r3, [r7, #31]
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;
 8000f7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f80:	83bb      	strh	r3, [r7, #28]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000f82:	2303      	movs	r3, #3
 8000f84:	77bb      	strb	r3, [r7, #30]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000f86:	f107 031c 	add.w	r3, r7, #28
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4818      	ldr	r0, [pc, #96]	; (8000ff0 <InitPwm+0x90>)
 8000f8e:	f7ff f93f 	bl	8000210 <GPIO_Init>

	TIM_TimeBaseInitTypeDef TIM_BaseStruct;
	TIM_BaseStruct.TIM_ClockDivision = TIM_CKD_DIV1;
 8000f92:	2300      	movs	r3, #0
 8000f94:	82fb      	strh	r3, [r7, #22]
	TIM_BaseStruct.TIM_CounterMode = TIM_CounterMode_Up;
 8000f96:	2300      	movs	r3, #0
 8000f98:	827b      	strh	r3, [r7, #18]
	TIM_BaseStruct.TIM_Period = 999 ;
 8000f9a:	f240 33e7 	movw	r3, #999	; 0x3e7
 8000f9e:	82bb      	strh	r3, [r7, #20]
	TIM_BaseStruct.TIM_Prescaler = 71 ;
 8000fa0:	2347      	movs	r3, #71	; 0x47
 8000fa2:	823b      	strh	r3, [r7, #16]
	TIM_BaseStruct.TIM_RepetitionCounter = 0 ;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	763b      	strb	r3, [r7, #24]
	TIM_TimeBaseInit(TIM1, &TIM_BaseStruct);
 8000fa8:	f107 0310 	add.w	r3, r7, #16
 8000fac:	4619      	mov	r1, r3
 8000fae:	4811      	ldr	r0, [pc, #68]	; (8000ff4 <InitPwm+0x94>)
 8000fb0:	f7ff fd0e 	bl	80009d0 <TIM_TimeBaseInit>


	TIM_OCInitTypeDef TIM_OCStruct;
	TIM_OCStruct.TIM_OCMode = TIM_OCMode_PWM2;
 8000fb4:	2370      	movs	r3, #112	; 0x70
 8000fb6:	803b      	strh	r3, [r7, #0]
	TIM_OCStruct.TIM_OutputState = TIM_OutputState_Enable;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	807b      	strh	r3, [r7, #2]
	TIM_OCStruct.TIM_OCPolarity = TIM_OCPolarity_Low;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	813b      	strh	r3, [r7, #8]
	TIM_OCStruct.TIM_Pulse = 0;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	80fb      	strh	r3, [r7, #6]
	TIM_OC1Init(TIM1, &TIM_OCStruct);
 8000fc4:	463b      	mov	r3, r7
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	480a      	ldr	r0, [pc, #40]	; (8000ff4 <InitPwm+0x94>)
 8000fca:	f7ff fd7d 	bl	8000ac8 <TIM_OC1Init>
	TIM_OC1PreloadConfig(TIM1, TIM_OCPreload_Enable);
 8000fce:	2108      	movs	r1, #8
 8000fd0:	4808      	ldr	r0, [pc, #32]	; (8000ff4 <InitPwm+0x94>)
 8000fd2:	f7ff fe49 	bl	8000c68 <TIM_OC1PreloadConfig>
	TIM_Cmd(TIM1, ENABLE);
 8000fd6:	2101      	movs	r1, #1
 8000fd8:	4806      	ldr	r0, [pc, #24]	; (8000ff4 <InitPwm+0x94>)
 8000fda:	f7ff fe01 	bl	8000be0 <TIM_Cmd>
	TIM_CtrlPWMOutputs(TIM1, ENABLE);
 8000fde:	2101      	movs	r1, #1
 8000fe0:	4804      	ldr	r0, [pc, #16]	; (8000ff4 <InitPwm+0x94>)
 8000fe2:	f7ff fe1c 	bl	8000c1e <TIM_CtrlPWMOutputs>
}
 8000fe6:	bf00      	nop
 8000fe8:	3720      	adds	r7, #32
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40010800 	.word	0x40010800
 8000ff4:	40012c00 	.word	0x40012c00

08000ff8 <InitSPI>:

void InitSPI()
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	af00      	add	r7, sp, #0
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO,ENABLE);
 8000ffe:	2101      	movs	r1, #1
 8001000:	2005      	movs	r0, #5
 8001002:	f7ff fc47 	bl	8000894 <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
 8001006:	2101      	movs	r1, #1
 8001008:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800100c:	f7ff fc42 	bl	8000894 <RCC_APB2PeriphClockCmd>
	GPIO_InitTypeDef GPIO;
	GPIO.GPIO_Mode = GPIO_Mode_AF_PP;
 8001010:	2318      	movs	r3, #24
 8001012:	75fb      	strb	r3, [r7, #23]
	GPIO.GPIO_Pin =  GPIO_Pin_5 | GPIO_Pin_6 | GPIO_Pin_7;
 8001014:	23e0      	movs	r3, #224	; 0xe0
 8001016:	82bb      	strh	r3, [r7, #20]
	GPIO.GPIO_Speed = GPIO_Speed_50MHz;
 8001018:	2303      	movs	r3, #3
 800101a:	75bb      	strb	r3, [r7, #22]
	GPIO_Init(GPIOA, &GPIO);
 800101c:	f107 0314 	add.w	r3, r7, #20
 8001020:	4619      	mov	r1, r3
 8001022:	4816      	ldr	r0, [pc, #88]	; (800107c <InitSPI+0x84>)
 8001024:	f7ff f8f4 	bl	8000210 <GPIO_Init>

	GPIO.GPIO_Mode = GPIO_Mode_Out_PP;
 8001028:	2310      	movs	r3, #16
 800102a:	75fb      	strb	r3, [r7, #23]
	GPIO.GPIO_Pin = GPIO_Pin_4;
 800102c:	2310      	movs	r3, #16
 800102e:	82bb      	strh	r3, [r7, #20]
	GPIO_Init(GPIOA, &GPIO);
 8001030:	f107 0314 	add.w	r3, r7, #20
 8001034:	4619      	mov	r1, r3
 8001036:	4811      	ldr	r0, [pc, #68]	; (800107c <InitSPI+0x84>)
 8001038:	f7ff f8ea 	bl	8000210 <GPIO_Init>

	SPI_InitTypeDef InitSPI;
	InitSPI.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_8;
 800103c:	2310      	movs	r3, #16
 800103e:	81bb      	strh	r3, [r7, #12]
	InitSPI.SPI_CPHA = SPI_CPHA_2Edge;
 8001040:	2301      	movs	r3, #1
 8001042:	813b      	strh	r3, [r7, #8]
	InitSPI.SPI_CPOL = SPI_CPOL_High;
 8001044:	2302      	movs	r3, #2
 8001046:	80fb      	strh	r3, [r7, #6]
	InitSPI.SPI_DataSize = SPI_DataSize_8b;
 8001048:	2300      	movs	r3, #0
 800104a:	80bb      	strh	r3, [r7, #4]
	InitSPI.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 800104c:	2300      	movs	r3, #0
 800104e:	803b      	strh	r3, [r7, #0]
	InitSPI.SPI_FirstBit = SPI_FirstBit_MSB;
 8001050:	2300      	movs	r3, #0
 8001052:	81fb      	strh	r3, [r7, #14]
	InitSPI.SPI_Mode = SPI_Mode_Master;
 8001054:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001058:	807b      	strh	r3, [r7, #2]
	InitSPI.SPI_NSS = SPI_NSS_Soft | SPI_NSSInternalSoft_Set;
 800105a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800105e:	817b      	strh	r3, [r7, #10]
	SPI_Init(SPI1,&InitSPI);
 8001060:	463b      	mov	r3, r7
 8001062:	4619      	mov	r1, r3
 8001064:	4806      	ldr	r0, [pc, #24]	; (8001080 <InitSPI+0x88>)
 8001066:	f7ff fc51 	bl	800090c <SPI_Init>
	SPI_Cmd(SPI1, ENABLE);
 800106a:	2101      	movs	r1, #1
 800106c:	4804      	ldr	r0, [pc, #16]	; (8001080 <InitSPI+0x88>)
 800106e:	f7ff fc90 	bl	8000992 <SPI_Cmd>
}
 8001072:	bf00      	nop
 8001074:	3718      	adds	r7, #24
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40010800 	.word	0x40010800
 8001080:	40013000 	.word	0x40013000

08001084 <InitI2C>:

void InitI2C()
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b086      	sub	sp, #24
 8001088:	af00      	add	r7, sp, #0
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB | RCC_APB2Periph_AFIO,ENABLE);
 800108a:	2101      	movs	r1, #1
 800108c:	2009      	movs	r0, #9
 800108e:	f7ff fc01 	bl	8000894 <RCC_APB2PeriphClockCmd>
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1,ENABLE);
 8001092:	2101      	movs	r1, #1
 8001094:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001098:	f7ff fc1a 	bl	80008d0 <RCC_APB1PeriphClockCmd>
	GPIO_InitTypeDef GPIO;
	GPIO.GPIO_Mode = GPIO_Mode_AF_OD;
 800109c:	231c      	movs	r3, #28
 800109e:	75fb      	strb	r3, [r7, #23]
	GPIO.GPIO_Pin = GPIO_Pin_7 | GPIO_Pin_6;
 80010a0:	23c0      	movs	r3, #192	; 0xc0
 80010a2:	82bb      	strh	r3, [r7, #20]
	GPIO.GPIO_Speed = GPIO_Speed_50MHz;
 80010a4:	2303      	movs	r3, #3
 80010a6:	75bb      	strb	r3, [r7, #22]
	GPIO_Init(GPIOB, &GPIO);
 80010a8:	f107 0314 	add.w	r3, r7, #20
 80010ac:	4619      	mov	r1, r3
 80010ae:	480f      	ldr	r0, [pc, #60]	; (80010ec <InitI2C+0x68>)
 80010b0:	f7ff f8ae 	bl	8000210 <GPIO_Init>

	I2C_InitTypeDef Test;
	Test.I2C_Ack = I2C_Ack_Enable;
 80010b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010b8:	81fb      	strh	r3, [r7, #14]
	Test.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 80010ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010be:	823b      	strh	r3, [r7, #16]
	Test.I2C_ClockSpeed = 100000;
 80010c0:	4b0b      	ldr	r3, [pc, #44]	; (80010f0 <InitI2C+0x6c>)
 80010c2:	607b      	str	r3, [r7, #4]
	Test.I2C_DutyCycle = I2C_DutyCycle_16_9;
 80010c4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010c8:	817b      	strh	r3, [r7, #10]
	Test.I2C_Mode = I2C_Mode_I2C;
 80010ca:	2300      	movs	r3, #0
 80010cc:	813b      	strh	r3, [r7, #8]
	Test.I2C_OwnAddress1 = 0x00;
 80010ce:	2300      	movs	r3, #0
 80010d0:	81bb      	strh	r3, [r7, #12]
	I2C_Init(I2C1, &Test);
 80010d2:	1d3b      	adds	r3, r7, #4
 80010d4:	4619      	mov	r1, r3
 80010d6:	4807      	ldr	r0, [pc, #28]	; (80010f4 <InitI2C+0x70>)
 80010d8:	f7ff f956 	bl	8000388 <I2C_Init>
	I2C_Cmd(I2C1, ENABLE);
 80010dc:	2101      	movs	r1, #1
 80010de:	4805      	ldr	r0, [pc, #20]	; (80010f4 <InitI2C+0x70>)
 80010e0:	f7ff fa14 	bl	800050c <I2C_Cmd>
}
 80010e4:	bf00      	nop
 80010e6:	3718      	adds	r7, #24
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	40010c00 	.word	0x40010c00
 80010f0:	000186a0 	.word	0x000186a0
 80010f4:	40005400 	.word	0x40005400

080010f8 <InitUsart>:

void InitUsart()
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af00      	add	r7, sp, #0
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_GPIOB |RCC_APB2Periph_AFIO,ENABLE);
 80010fe:	2101      	movs	r1, #1
 8001100:	200d      	movs	r0, #13
 8001102:	f7ff fbc7 	bl	8000894 <RCC_APB2PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1,ENABLE);
 8001106:	2101      	movs	r1, #1
 8001108:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800110c:	f7ff fbc2 	bl	8000894 <RCC_APB2PeriphClockCmd>

	GPIO_InitTypeDef GPIO_InitStructure;
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
 8001110:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001114:	82bb      	strh	r3, [r7, #20]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 8001116:	2302      	movs	r3, #2
 8001118:	75bb      	strb	r3, [r7, #22]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 800111a:	2318      	movs	r3, #24
 800111c:	75fb      	strb	r3, [r7, #23]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 800111e:	f107 0314 	add.w	r3, r7, #20
 8001122:	4619      	mov	r1, r3
 8001124:	4813      	ldr	r0, [pc, #76]	; (8001174 <InitUsart+0x7c>)
 8001126:	f7ff f873 	bl	8000210 <GPIO_Init>

	    /* PA10 = floating input */
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
 800112a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800112e:	82bb      	strh	r3, [r7, #20]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8001130:	2304      	movs	r3, #4
 8001132:	75fb      	strb	r3, [r7, #23]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001134:	f107 0314 	add.w	r3, r7, #20
 8001138:	4619      	mov	r1, r3
 800113a:	480e      	ldr	r0, [pc, #56]	; (8001174 <InitUsart+0x7c>)
 800113c:	f7ff f868 	bl	8000210 <GPIO_Init>

	USART_InitTypeDef usart;
	usart.USART_BaudRate = 9600;
 8001140:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8001144:	607b      	str	r3, [r7, #4]
	usart.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8001146:	2300      	movs	r3, #0
 8001148:	823b      	strh	r3, [r7, #16]
	usart.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800114a:	230c      	movs	r3, #12
 800114c:	81fb      	strh	r3, [r7, #14]
	usart.USART_Parity = USART_Parity_No;
 800114e:	2300      	movs	r3, #0
 8001150:	81bb      	strh	r3, [r7, #12]
	usart.USART_StopBits = USART_StopBits_1;
 8001152:	2300      	movs	r3, #0
 8001154:	817b      	strh	r3, [r7, #10]
	usart.USART_WordLength = USART_WordLength_8b;
 8001156:	2300      	movs	r3, #0
 8001158:	813b      	strh	r3, [r7, #8]
	USART_Init(USART1, &usart);
 800115a:	1d3b      	adds	r3, r7, #4
 800115c:	4619      	mov	r1, r3
 800115e:	4806      	ldr	r0, [pc, #24]	; (8001178 <InitUsart+0x80>)
 8001160:	f7ff fd9e 	bl	8000ca0 <USART_Init>
	USART_Cmd(USART1,ENABLE);
 8001164:	2101      	movs	r1, #1
 8001166:	4804      	ldr	r0, [pc, #16]	; (8001178 <InitUsart+0x80>)
 8001168:	f7ff fe54 	bl	8000e14 <USART_Cmd>
}
 800116c:	bf00      	nop
 800116e:	3718      	adds	r7, #24
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	40010800 	.word	0x40010800
 8001178:	40013800 	.word	0x40013800

0800117c <sendData>:

int sendData(uint8_t data)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	71fb      	strb	r3, [r7, #7]
	USART_SendData(USART1,data);
 8001186:	79fb      	ldrb	r3, [r7, #7]
 8001188:	b29b      	uxth	r3, r3
 800118a:	4619      	mov	r1, r3
 800118c:	4807      	ldr	r0, [pc, #28]	; (80011ac <sendData+0x30>)
 800118e:	f7ff fe60 	bl	8000e52 <USART_SendData>
	while(USART_GetFlagStatus(USART1,USART_FLAG_TXE)==RESET);
 8001192:	bf00      	nop
 8001194:	2180      	movs	r1, #128	; 0x80
 8001196:	4805      	ldr	r0, [pc, #20]	; (80011ac <sendData+0x30>)
 8001198:	f7ff fe6c 	bl	8000e74 <USART_GetFlagStatus>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d0f8      	beq.n	8001194 <sendData+0x18>
	return data;
 80011a2:	79fb      	ldrb	r3, [r7, #7]
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	40013800 	.word	0x40013800

080011b0 <transceive>:
	datarx=USART_ReceiveData(USART1);
	return datarx;
}

uint8_t transceive(uint8_t* txData,uint32_t txDataLen, uint8_t* rxBuffer)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b087      	sub	sp, #28
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	607a      	str	r2, [r7, #4]
    for(int i=0; i<txDataLen; i++)
 80011bc:	2300      	movs	r3, #0
 80011be:	617b      	str	r3, [r7, #20]
 80011c0:	e021      	b.n	8001206 <transceive+0x56>
    {
        while(!((SPI1)->SR & SPI_SR_TXE));
 80011c2:	bf00      	nop
 80011c4:	4b15      	ldr	r3, [pc, #84]	; (800121c <transceive+0x6c>)
 80011c6:	891b      	ldrh	r3, [r3, #8]
 80011c8:	b29b      	uxth	r3, r3
 80011ca:	f003 0302 	and.w	r3, r3, #2
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d0f8      	beq.n	80011c4 <transceive+0x14>
        SPI1->DR = txData[i];
 80011d2:	4912      	ldr	r1, [pc, #72]	; (800121c <transceive+0x6c>)
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	68fa      	ldr	r2, [r7, #12]
 80011d8:	4413      	add	r3, r2
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	b29b      	uxth	r3, r3
 80011de:	818b      	strh	r3, [r1, #12]
        while(!((SPI1)->SR & SPI_SR_RXNE));
 80011e0:	bf00      	nop
 80011e2:	4b0e      	ldr	r3, [pc, #56]	; (800121c <transceive+0x6c>)
 80011e4:	891b      	ldrh	r3, [r3, #8]
 80011e6:	b29b      	uxth	r3, r3
 80011e8:	f003 0301 	and.w	r3, r3, #1
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d0f8      	beq.n	80011e2 <transceive+0x32>
        rxBuffer[i] = SPI1->DR;
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	4413      	add	r3, r2
 80011f6:	4a09      	ldr	r2, [pc, #36]	; (800121c <transceive+0x6c>)
 80011f8:	8992      	ldrh	r2, [r2, #12]
 80011fa:	b292      	uxth	r2, r2
 80011fc:	b2d2      	uxtb	r2, r2
 80011fe:	701a      	strb	r2, [r3, #0]
    for(int i=0; i<txDataLen; i++)
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	3301      	adds	r3, #1
 8001204:	617b      	str	r3, [r7, #20]
 8001206:	697a      	ldr	r2, [r7, #20]
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	429a      	cmp	r2, r3
 800120c:	d3d9      	bcc.n	80011c2 <transceive+0x12>
    }
}
 800120e:	bf00      	nop
 8001210:	4618      	mov	r0, r3
 8001212:	371c      	adds	r7, #28
 8001214:	46bd      	mov	sp, r7
 8001216:	bc80      	pop	{r7}
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	40013000 	.word	0x40013000

08001220 <i2c_start>:

void i2c_start()
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
	while(I2C_GetFlagStatus(I2C1, I2C_FLAG_BUSY));
 8001224:	bf00      	nop
 8001226:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800122a:	4806      	ldr	r0, [pc, #24]	; (8001244 <i2c_start+0x24>)
 800122c:	f7ff fa52 	bl	80006d4 <I2C_GetFlagStatus>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d1f7      	bne.n	8001226 <i2c_start+0x6>
    I2C_GenerateSTART(I2C1, ENABLE);
 8001236:	2101      	movs	r1, #1
 8001238:	4802      	ldr	r0, [pc, #8]	; (8001244 <i2c_start+0x24>)
 800123a:	f7ff f986 	bl	800054a <I2C_GenerateSTART>
}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40005400 	.word	0x40005400

08001248 <i2c_stop>:

void i2c_stop()
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
    I2C_GenerateSTOP(I2C1, ENABLE);
 800124c:	2101      	movs	r1, #1
 800124e:	4806      	ldr	r0, [pc, #24]	; (8001268 <i2c_stop+0x20>)
 8001250:	f7ff f99a 	bl	8000588 <I2C_GenerateSTOP>
    while (I2C_GetFlagStatus(I2C1, I2C_FLAG_STOPF));
 8001254:	bf00      	nop
 8001256:	4905      	ldr	r1, [pc, #20]	; (800126c <i2c_stop+0x24>)
 8001258:	4803      	ldr	r0, [pc, #12]	; (8001268 <i2c_stop+0x20>)
 800125a:	f7ff fa3b 	bl	80006d4 <I2C_GetFlagStatus>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d1f8      	bne.n	8001256 <i2c_stop+0xe>
}
 8001264:	bf00      	nop
 8001266:	bd80      	pop	{r7, pc}
 8001268:	40005400 	.word	0x40005400
 800126c:	10000010 	.word	0x10000010

08001270 <read>:
  	while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
    I2C_AcknowledgeConfig(I2C1, DISABLE); //ack
}

uint32_t read(uint8_t devAddr,uint8_t regAddr, uint8_t* dataIn, uint32_t maxDataLen)
{
 8001270:	b590      	push	{r4, r7, lr}
 8001272:	b087      	sub	sp, #28
 8001274:	af00      	add	r7, sp, #0
 8001276:	60ba      	str	r2, [r7, #8]
 8001278:	607b      	str	r3, [r7, #4]
 800127a:	4603      	mov	r3, r0
 800127c:	73fb      	strb	r3, [r7, #15]
 800127e:	460b      	mov	r3, r1
 8001280:	73bb      	strb	r3, [r7, #14]
	I2C_AcknowledgeConfig(I2C1, ENABLE); //ack
 8001282:	2101      	movs	r1, #1
 8001284:	4833      	ldr	r0, [pc, #204]	; (8001354 <read+0xe4>)
 8001286:	f7ff f99e 	bl	80005c6 <I2C_AcknowledgeConfig>
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT)); //ev5
 800128a:	bf00      	nop
 800128c:	4932      	ldr	r1, [pc, #200]	; (8001358 <read+0xe8>)
 800128e:	4831      	ldr	r0, [pc, #196]	; (8001354 <read+0xe4>)
 8001290:	f7ff f9f1 	bl	8000676 <I2C_CheckEvent>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d0f8      	beq.n	800128c <read+0x1c>
	I2C_Send7bitAddress(I2C1, devAddr << 1,I2C_Direction_Transmitter); // address
 800129a:	7bfb      	ldrb	r3, [r7, #15]
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	2200      	movs	r2, #0
 80012a2:	4619      	mov	r1, r3
 80012a4:	482b      	ldr	r0, [pc, #172]	; (8001354 <read+0xe4>)
 80012a6:	f7ff f9c9 	bl	800063c <I2C_Send7bitAddress>
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED)); // ev6
 80012aa:	bf00      	nop
 80012ac:	492b      	ldr	r1, [pc, #172]	; (800135c <read+0xec>)
 80012ae:	4829      	ldr	r0, [pc, #164]	; (8001354 <read+0xe4>)
 80012b0:	f7ff f9e1 	bl	8000676 <I2C_CheckEvent>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d0f8      	beq.n	80012ac <read+0x3c>
	I2C_SendData(I2C1, regAddr); //data
 80012ba:	7bbb      	ldrb	r3, [r7, #14]
 80012bc:	4619      	mov	r1, r3
 80012be:	4825      	ldr	r0, [pc, #148]	; (8001354 <read+0xe4>)
 80012c0:	f7ff f9a0 	bl	8000604 <I2C_SendData>
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED)); //ev8_2
 80012c4:	bf00      	nop
 80012c6:	4926      	ldr	r1, [pc, #152]	; (8001360 <read+0xf0>)
 80012c8:	4822      	ldr	r0, [pc, #136]	; (8001354 <read+0xe4>)
 80012ca:	f7ff f9d4 	bl	8000676 <I2C_CheckEvent>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d0f8      	beq.n	80012c6 <read+0x56>
	I2C_GenerateSTART(I2C1, ENABLE);
 80012d4:	2101      	movs	r1, #1
 80012d6:	481f      	ldr	r0, [pc, #124]	; (8001354 <read+0xe4>)
 80012d8:	f7ff f937 	bl	800054a <I2C_GenerateSTART>
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT));//ev5
 80012dc:	bf00      	nop
 80012de:	491e      	ldr	r1, [pc, #120]	; (8001358 <read+0xe8>)
 80012e0:	481c      	ldr	r0, [pc, #112]	; (8001354 <read+0xe4>)
 80012e2:	f7ff f9c8 	bl	8000676 <I2C_CheckEvent>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d0f8      	beq.n	80012de <read+0x6e>
    I2C_Send7bitAddress(I2C1, devAddr << 1 ,I2C_Direction_Receiver);//add
 80012ec:	7bfb      	ldrb	r3, [r7, #15]
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	2201      	movs	r2, #1
 80012f4:	4619      	mov	r1, r3
 80012f6:	4817      	ldr	r0, [pc, #92]	; (8001354 <read+0xe4>)
 80012f8:	f7ff f9a0 	bl	800063c <I2C_Send7bitAddress>
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED));//ev6
 80012fc:	bf00      	nop
 80012fe:	4919      	ldr	r1, [pc, #100]	; (8001364 <read+0xf4>)
 8001300:	4814      	ldr	r0, [pc, #80]	; (8001354 <read+0xe4>)
 8001302:	f7ff f9b8 	bl	8000676 <I2C_CheckEvent>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d0f8      	beq.n	80012fe <read+0x8e>
    for(int i = 0; i<maxDataLen; i++)
 800130c:	2300      	movs	r3, #0
 800130e:	617b      	str	r3, [r7, #20]
 8001310:	e012      	b.n	8001338 <read+0xc8>
    {
        while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_RECEIVED)); //ev7
 8001312:	bf00      	nop
 8001314:	4914      	ldr	r1, [pc, #80]	; (8001368 <read+0xf8>)
 8001316:	480f      	ldr	r0, [pc, #60]	; (8001354 <read+0xe4>)
 8001318:	f7ff f9ad 	bl	8000676 <I2C_CheckEvent>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d0f8      	beq.n	8001314 <read+0xa4>
        dataIn[i] = I2C_ReceiveData(I2C1);
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	68ba      	ldr	r2, [r7, #8]
 8001326:	18d4      	adds	r4, r2, r3
 8001328:	480a      	ldr	r0, [pc, #40]	; (8001354 <read+0xe4>)
 800132a:	f7ff f97a 	bl	8000622 <I2C_ReceiveData>
 800132e:	4603      	mov	r3, r0
 8001330:	7023      	strb	r3, [r4, #0]
    for(int i = 0; i<maxDataLen; i++)
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	3301      	adds	r3, #1
 8001336:	617b      	str	r3, [r7, #20]
 8001338:	697a      	ldr	r2, [r7, #20]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	429a      	cmp	r2, r3
 800133e:	d3e8      	bcc.n	8001312 <read+0xa2>
    }
	I2C_AcknowledgeConfig(I2C1, DISABLE);
 8001340:	2100      	movs	r1, #0
 8001342:	4804      	ldr	r0, [pc, #16]	; (8001354 <read+0xe4>)
 8001344:	f7ff f93f 	bl	80005c6 <I2C_AcknowledgeConfig>
}
 8001348:	bf00      	nop
 800134a:	4618      	mov	r0, r3
 800134c:	371c      	adds	r7, #28
 800134e:	46bd      	mov	sp, r7
 8001350:	bd90      	pop	{r4, r7, pc}
 8001352:	bf00      	nop
 8001354:	40005400 	.word	0x40005400
 8001358:	00030001 	.word	0x00030001
 800135c:	00070082 	.word	0x00070082
 8001360:	00070084 	.word	0x00070084
 8001364:	00030002 	.word	0x00030002
 8001368:	00030040 	.word	0x00030040

0800136c <main>:


int main()
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b0b4      	sub	sp, #208	; 0xd0
 8001370:	af00      	add	r7, sp, #0
	//SystemCoreClock
	SystemInit();
 8001372:	f000 f8a9 	bl	80014c8 <SystemInit>
	InitGPIOC();
 8001376:	f7ff fd99 	bl	8000eac <InitGPIOC>
	InitUsart();
 800137a:	f7ff febd 	bl	80010f8 <InitUsart>
	InitUsart2();
 800137e:	f7ff fdaf 	bl	8000ee0 <InitUsart2>
	InitPwm();
 8001382:	f7ff fded 	bl	8000f60 <InitPwm>
	InitSPI();
 8001386:	f7ff fe37 	bl	8000ff8 <InitSPI>
	InitI2C();
 800138a:	f7ff fe7b 	bl	8001084 <InitI2C>
	sendData(65);
 800138e:	2041      	movs	r0, #65	; 0x41
 8001390:	f7ff fef4 	bl	800117c <sendData>

	uint8_t rx[2], tx[2], data;
	tx[0] = 0x8F;
 8001394:	238f      	movs	r3, #143	; 0x8f
 8001396:	f887 30c8 	strb.w	r3, [r7, #200]	; 0xc8
	tx[1] = 0x00;
 800139a:	2300      	movs	r3, #0
 800139c:	f887 30c9 	strb.w	r3, [r7, #201]	; 0xc9
	GPIOA -> BRR = GPIO_Pin_4; //mati chip select untuk SPI
 80013a0:	4b1f      	ldr	r3, [pc, #124]	; (8001420 <main+0xb4>)
 80013a2:	2210      	movs	r2, #16
 80013a4:	615a      	str	r2, [r3, #20]
	transceive(tx,2,rx); //write data using SPI and read data using SPI
 80013a6:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 80013aa:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80013ae:	2102      	movs	r1, #2
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff fefd 	bl	80011b0 <transceive>
	data = rx[1];
 80013b6:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 80013ba:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	GPIOA -> BSRR = GPIO_Pin_4; // hidup chip select untuk SPI
 80013be:	4b18      	ldr	r3, [pc, #96]	; (8001420 <main+0xb4>)
 80013c0:	2210      	movs	r2, #16
 80013c2:	611a      	str	r2, [r3, #16]


	uint8_t rx1[100];
	uint8_t tx1[100];
	tx1[0] = 0x04;
 80013c4:	2304      	movs	r3, #4
 80013c6:	703b      	strb	r3, [r7, #0]
	tx1[1] = 0x05;
 80013c8:	2305      	movs	r3, #5
 80013ca:	707b      	strb	r3, [r7, #1]
	tx1[2] = 0x06;
 80013cc:	2306      	movs	r3, #6
 80013ce:	70bb      	strb	r3, [r7, #2]
	i2c_start(); //start communication I2c
 80013d0:	f7ff ff26 	bl	8001220 <i2c_start>
	write(0x69,0xA0,tx1,3); // write data in I2C Communication
 80013d4:	463a      	mov	r2, r7
 80013d6:	2303      	movs	r3, #3
 80013d8:	21a0      	movs	r1, #160	; 0xa0
 80013da:	2069      	movs	r0, #105	; 0x69
 80013dc:	f000 f956 	bl	800168c <write>
	i2c_stop(); //stop communication I2c
 80013e0:	f7ff ff32 	bl	8001248 <i2c_stop>
	while(1)
	{

		TIM1->CCR1 = 50;	//PWM
 80013e4:	4b0f      	ldr	r3, [pc, #60]	; (8001424 <main+0xb8>)
 80013e6:	2232      	movs	r2, #50	; 0x32
 80013e8:	869a      	strh	r2, [r3, #52]	; 0x34
		sendData(rx1[0]);	//Send data using Usart
 80013ea:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff fec4 	bl	800117c <sendData>
		sendData(rx1[1]);
 80013f4:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff febf 	bl	800117c <sendData>
		sendData(rx1[2]);
 80013fe:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff feba 	bl	800117c <sendData>
		i2c_start();
 8001408:	f7ff ff0a 	bl	8001220 <i2c_start>
		read(0x69,0xA0,rx1,3);
 800140c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001410:	2303      	movs	r3, #3
 8001412:	21a0      	movs	r1, #160	; 0xa0
 8001414:	2069      	movs	r0, #105	; 0x69
 8001416:	f7ff ff2b 	bl	8001270 <read>
		i2c_stop();
 800141a:	f7ff ff15 	bl	8001248 <i2c_stop>
		TIM1->CCR1 = 50;	//PWM
 800141e:	e7e1      	b.n	80013e4 <main+0x78>
 8001420:	40010800 	.word	0x40010800
 8001424:	40012c00 	.word	0x40012c00

08001428 <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001428:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800142a:	e003      	b.n	8001434 <LoopCopyDataInit>

0800142c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800142c:	4b0b      	ldr	r3, [pc, #44]	; (800145c <LoopFillZerobss+0x14>)
	ldr	r3, [r3, r1]
 800142e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001430:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001432:	3104      	adds	r1, #4

08001434 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001434:	480a      	ldr	r0, [pc, #40]	; (8001460 <LoopFillZerobss+0x18>)
	ldr	r3, =_edata
 8001436:	4b0b      	ldr	r3, [pc, #44]	; (8001464 <LoopFillZerobss+0x1c>)
	adds	r2, r0, r1
 8001438:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800143a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800143c:	d3f6      	bcc.n	800142c <CopyDataInit>
	ldr	r2, =_sbss
 800143e:	4a0a      	ldr	r2, [pc, #40]	; (8001468 <LoopFillZerobss+0x20>)
	b	LoopFillZerobss
 8001440:	e002      	b.n	8001448 <LoopFillZerobss>

08001442 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001442:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001444:	f842 3b04 	str.w	r3, [r2], #4

08001448 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001448:	4b08      	ldr	r3, [pc, #32]	; (800146c <LoopFillZerobss+0x24>)
	cmp	r2, r3
 800144a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800144c:	d3f9      	bcc.n	8001442 <FillZerobss>
	
/* Call the clock system intitialization function.*/
  bl  SystemInit 
 800144e:	f000 f83b 	bl	80014c8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array  
 8001452:	f000 f8f7 	bl	8001644 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001456:	f7ff ff89 	bl	800136c <main>
	bx	lr
 800145a:	4770      	bx	lr
	ldr	r3, =_sidata
 800145c:	080016f4 	.word	0x080016f4
	ldr	r0, =_sdata
 8001460:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001464:	20000078 	.word	0x20000078
	ldr	r2, =_sbss
 8001468:	20000078 	.word	0x20000078
	ldr	r3, = _ebss
 800146c:	20000098 	.word	0x20000098

08001470 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001470:	e7fe      	b.n	8001470 <ADC1_IRQHandler>

08001472 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001472:	b480      	push	{r7}
 8001474:	af00      	add	r7, sp, #0
}
 8001476:	bf00      	nop
 8001478:	46bd      	mov	sp, r7
 800147a:	bc80      	pop	{r7}
 800147c:	4770      	bx	lr

0800147e <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800147e:	b480      	push	{r7}
 8001480:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001482:	e7fe      	b.n	8001482 <HardFault_Handler+0x4>

08001484 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001488:	e7fe      	b.n	8001488 <MemManage_Handler+0x4>

0800148a <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800148a:	b480      	push	{r7}
 800148c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800148e:	e7fe      	b.n	800148e <BusFault_Handler+0x4>

08001490 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001494:	e7fe      	b.n	8001494 <UsageFault_Handler+0x4>

08001496 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001496:	b480      	push	{r7}
 8001498:	af00      	add	r7, sp, #0
}
 800149a:	bf00      	nop
 800149c:	46bd      	mov	sp, r7
 800149e:	bc80      	pop	{r7}
 80014a0:	4770      	bx	lr

080014a2 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80014a2:	b480      	push	{r7}
 80014a4:	af00      	add	r7, sp, #0
}
 80014a6:	bf00      	nop
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bc80      	pop	{r7}
 80014ac:	4770      	bx	lr

080014ae <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80014ae:	b480      	push	{r7}
 80014b0:	af00      	add	r7, sp, #0
}
 80014b2:	bf00      	nop
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bc80      	pop	{r7}
 80014b8:	4770      	bx	lr

080014ba <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80014ba:	b480      	push	{r7}
 80014bc:	af00      	add	r7, sp, #0
}
 80014be:	bf00      	nop
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bc80      	pop	{r7}
 80014c4:	4770      	bx	lr
	...

080014c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80014cc:	4a17      	ldr	r2, [pc, #92]	; (800152c <SystemInit+0x64>)
 80014ce:	4b17      	ldr	r3, [pc, #92]	; (800152c <SystemInit+0x64>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f043 0301 	orr.w	r3, r3, #1
 80014d6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80014d8:	4914      	ldr	r1, [pc, #80]	; (800152c <SystemInit+0x64>)
 80014da:	4b14      	ldr	r3, [pc, #80]	; (800152c <SystemInit+0x64>)
 80014dc:	685a      	ldr	r2, [r3, #4]
 80014de:	4b14      	ldr	r3, [pc, #80]	; (8001530 <SystemInit+0x68>)
 80014e0:	4013      	ands	r3, r2
 80014e2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80014e4:	4a11      	ldr	r2, [pc, #68]	; (800152c <SystemInit+0x64>)
 80014e6:	4b11      	ldr	r3, [pc, #68]	; (800152c <SystemInit+0x64>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80014ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014f2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80014f4:	4a0d      	ldr	r2, [pc, #52]	; (800152c <SystemInit+0x64>)
 80014f6:	4b0d      	ldr	r3, [pc, #52]	; (800152c <SystemInit+0x64>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014fe:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8001500:	4a0a      	ldr	r2, [pc, #40]	; (800152c <SystemInit+0x64>)
 8001502:	4b0a      	ldr	r3, [pc, #40]	; (800152c <SystemInit+0x64>)
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800150a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 800150c:	4b07      	ldr	r3, [pc, #28]	; (800152c <SystemInit+0x64>)
 800150e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001512:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
 8001514:	4b05      	ldr	r3, [pc, #20]	; (800152c <SystemInit+0x64>)
 8001516:	2200      	movs	r2, #0
 8001518:	62da      	str	r2, [r3, #44]	; 0x2c
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 800151a:	f000 f80d 	bl	8001538 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800151e:	4b05      	ldr	r3, [pc, #20]	; (8001534 <SystemInit+0x6c>)
 8001520:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001524:	609a      	str	r2, [r3, #8]
#endif 
}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	40021000 	.word	0x40021000
 8001530:	f8ff0000 	.word	0xf8ff0000
 8001534:	e000ed00 	.word	0xe000ed00

08001538 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 800153c:	f000 f802 	bl	8001544 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8001540:	bf00      	nop
 8001542:	bd80      	pop	{r7, pc}

08001544 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800154a:	2300      	movs	r3, #0
 800154c:	607b      	str	r3, [r7, #4]
 800154e:	2300      	movs	r3, #0
 8001550:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001552:	4a3a      	ldr	r2, [pc, #232]	; (800163c <SetSysClockTo72+0xf8>)
 8001554:	4b39      	ldr	r3, [pc, #228]	; (800163c <SetSysClockTo72+0xf8>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800155c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800155e:	4b37      	ldr	r3, [pc, #220]	; (800163c <SetSysClockTo72+0xf8>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001566:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	3301      	adds	r3, #1
 800156c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d103      	bne.n	800157c <SetSysClockTo72+0x38>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800157a:	d1f0      	bne.n	800155e <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800157c:	4b2f      	ldr	r3, [pc, #188]	; (800163c <SetSysClockTo72+0xf8>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001584:	2b00      	cmp	r3, #0
 8001586:	d002      	beq.n	800158e <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001588:	2301      	movs	r3, #1
 800158a:	603b      	str	r3, [r7, #0]
 800158c:	e001      	b.n	8001592 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800158e:	2300      	movs	r3, #0
 8001590:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	2b01      	cmp	r3, #1
 8001596:	d14b      	bne.n	8001630 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8001598:	4a29      	ldr	r2, [pc, #164]	; (8001640 <SetSysClockTo72+0xfc>)
 800159a:	4b29      	ldr	r3, [pc, #164]	; (8001640 <SetSysClockTo72+0xfc>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f043 0310 	orr.w	r3, r3, #16
 80015a2:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 80015a4:	4a26      	ldr	r2, [pc, #152]	; (8001640 <SetSysClockTo72+0xfc>)
 80015a6:	4b26      	ldr	r3, [pc, #152]	; (8001640 <SetSysClockTo72+0xfc>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f023 0303 	bic.w	r3, r3, #3
 80015ae:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 80015b0:	4a23      	ldr	r2, [pc, #140]	; (8001640 <SetSysClockTo72+0xfc>)
 80015b2:	4b23      	ldr	r3, [pc, #140]	; (8001640 <SetSysClockTo72+0xfc>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f043 0302 	orr.w	r3, r3, #2
 80015ba:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80015bc:	4a1f      	ldr	r2, [pc, #124]	; (800163c <SetSysClockTo72+0xf8>)
 80015be:	4b1f      	ldr	r3, [pc, #124]	; (800163c <SetSysClockTo72+0xf8>)
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80015c4:	4a1d      	ldr	r2, [pc, #116]	; (800163c <SetSysClockTo72+0xf8>)
 80015c6:	4b1d      	ldr	r3, [pc, #116]	; (800163c <SetSysClockTo72+0xf8>)
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80015cc:	4a1b      	ldr	r2, [pc, #108]	; (800163c <SetSysClockTo72+0xf8>)
 80015ce:	4b1b      	ldr	r3, [pc, #108]	; (800163c <SetSysClockTo72+0xf8>)
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015d6:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 80015d8:	4a18      	ldr	r2, [pc, #96]	; (800163c <SetSysClockTo72+0xf8>)
 80015da:	4b18      	ldr	r3, [pc, #96]	; (800163c <SetSysClockTo72+0xf8>)
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80015e2:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLMULL9);
 80015e4:	4a15      	ldr	r2, [pc, #84]	; (800163c <SetSysClockTo72+0xf8>)
 80015e6:	4b15      	ldr	r3, [pc, #84]	; (800163c <SetSysClockTo72+0xf8>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 80015ee:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 80015f0:	4a12      	ldr	r2, [pc, #72]	; (800163c <SetSysClockTo72+0xf8>)
 80015f2:	4b12      	ldr	r3, [pc, #72]	; (800163c <SetSysClockTo72+0xf8>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015fa:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80015fc:	bf00      	nop
 80015fe:	4b0f      	ldr	r3, [pc, #60]	; (800163c <SetSysClockTo72+0xf8>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d0f9      	beq.n	80015fe <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800160a:	4a0c      	ldr	r2, [pc, #48]	; (800163c <SetSysClockTo72+0xf8>)
 800160c:	4b0b      	ldr	r3, [pc, #44]	; (800163c <SetSysClockTo72+0xf8>)
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f023 0303 	bic.w	r3, r3, #3
 8001614:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8001616:	4a09      	ldr	r2, [pc, #36]	; (800163c <SetSysClockTo72+0xf8>)
 8001618:	4b08      	ldr	r3, [pc, #32]	; (800163c <SetSysClockTo72+0xf8>)
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f043 0302 	orr.w	r3, r3, #2
 8001620:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8001622:	bf00      	nop
 8001624:	4b05      	ldr	r3, [pc, #20]	; (800163c <SetSysClockTo72+0xf8>)
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f003 030c 	and.w	r3, r3, #12
 800162c:	2b08      	cmp	r3, #8
 800162e:	d1f9      	bne.n	8001624 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8001630:	bf00      	nop
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	bc80      	pop	{r7}
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	40021000 	.word	0x40021000
 8001640:	40022000 	.word	0x40022000

08001644 <__libc_init_array>:
 8001644:	b570      	push	{r4, r5, r6, lr}
 8001646:	2500      	movs	r5, #0
 8001648:	4e0c      	ldr	r6, [pc, #48]	; (800167c <__libc_init_array+0x38>)
 800164a:	4c0d      	ldr	r4, [pc, #52]	; (8001680 <__libc_init_array+0x3c>)
 800164c:	1ba4      	subs	r4, r4, r6
 800164e:	10a4      	asrs	r4, r4, #2
 8001650:	42a5      	cmp	r5, r4
 8001652:	d109      	bne.n	8001668 <__libc_init_array+0x24>
 8001654:	f000 f83e 	bl	80016d4 <_init>
 8001658:	2500      	movs	r5, #0
 800165a:	4e0a      	ldr	r6, [pc, #40]	; (8001684 <__libc_init_array+0x40>)
 800165c:	4c0a      	ldr	r4, [pc, #40]	; (8001688 <__libc_init_array+0x44>)
 800165e:	1ba4      	subs	r4, r4, r6
 8001660:	10a4      	asrs	r4, r4, #2
 8001662:	42a5      	cmp	r5, r4
 8001664:	d105      	bne.n	8001672 <__libc_init_array+0x2e>
 8001666:	bd70      	pop	{r4, r5, r6, pc}
 8001668:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800166c:	4798      	blx	r3
 800166e:	3501      	adds	r5, #1
 8001670:	e7ee      	b.n	8001650 <__libc_init_array+0xc>
 8001672:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001676:	4798      	blx	r3
 8001678:	3501      	adds	r5, #1
 800167a:	e7f2      	b.n	8001662 <__libc_init_array+0x1e>
 800167c:	080016ec 	.word	0x080016ec
 8001680:	080016ec 	.word	0x080016ec
 8001684:	080016ec 	.word	0x080016ec
 8001688:	080016f0 	.word	0x080016f0

0800168c <write>:
 800168c:	4613      	mov	r3, r2
 800168e:	460a      	mov	r2, r1
 8001690:	4601      	mov	r1, r0
 8001692:	4802      	ldr	r0, [pc, #8]	; (800169c <write+0x10>)
 8001694:	6800      	ldr	r0, [r0, #0]
 8001696:	f000 b803 	b.w	80016a0 <_write_r>
 800169a:	bf00      	nop
 800169c:	20000014 	.word	0x20000014

080016a0 <_write_r>:
 80016a0:	b538      	push	{r3, r4, r5, lr}
 80016a2:	4605      	mov	r5, r0
 80016a4:	4608      	mov	r0, r1
 80016a6:	4611      	mov	r1, r2
 80016a8:	2200      	movs	r2, #0
 80016aa:	4c05      	ldr	r4, [pc, #20]	; (80016c0 <_write_r+0x20>)
 80016ac:	6022      	str	r2, [r4, #0]
 80016ae:	461a      	mov	r2, r3
 80016b0:	f000 f808 	bl	80016c4 <_write>
 80016b4:	1c43      	adds	r3, r0, #1
 80016b6:	d102      	bne.n	80016be <_write_r+0x1e>
 80016b8:	6823      	ldr	r3, [r4, #0]
 80016ba:	b103      	cbz	r3, 80016be <_write_r+0x1e>
 80016bc:	602b      	str	r3, [r5, #0]
 80016be:	bd38      	pop	{r3, r4, r5, pc}
 80016c0:	20000094 	.word	0x20000094

080016c4 <_write>:
 80016c4:	2258      	movs	r2, #88	; 0x58
 80016c6:	4b02      	ldr	r3, [pc, #8]	; (80016d0 <_write+0xc>)
 80016c8:	f04f 30ff 	mov.w	r0, #4294967295
 80016cc:	601a      	str	r2, [r3, #0]
 80016ce:	4770      	bx	lr
 80016d0:	20000094 	.word	0x20000094

080016d4 <_init>:
 80016d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016d6:	bf00      	nop
 80016d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016da:	bc08      	pop	{r3}
 80016dc:	469e      	mov	lr, r3
 80016de:	4770      	bx	lr

080016e0 <_fini>:
 80016e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016e2:	bf00      	nop
 80016e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016e6:	bc08      	pop	{r3}
 80016e8:	469e      	mov	lr, r3
 80016ea:	4770      	bx	lr
